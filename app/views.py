"""Definition of views."""from django.shortcuts import render, redirectfrom django.http import HttpRequestfrom django.http import HttpResponsefrom django.http import JsonResponsefrom django.contrib.auth import authenticatefrom django.contrib.auth import login as log from django.contrib.auth import logout as lgoutfrom django.contrib import messagesfrom django.contrib.auth.decorators import login_requiredfrom .models import *from .forms import *import logginglogger = logging.getLogger('mylogs')def login(request):                      """Renders the home page."""    if request.user.is_authenticated:       return render(request, 'app/menu.html')    if request.POST.get('log'):        username = request.POST['username']        password = request.POST['password']        user = authenticate(request, username=username, password=password)        if user is not None:            log(request, user)            # Redirect to a success page.            return render(request, 'app/menu.html')        else:            # Return an 'invalid login' error message.            messages.error(request,'username or password not correct')            return redirect('login')                      return render(request, 'app/login.html')@login_requireddef menu(request):    return render(request, "app/menu.html")def update_menu(request):    return render(request, "app/tabs/update_menu.html")def logout(request):    lgout(request)def building_add(request):    #Заказчик в селект    posts1 = list(Customers.objects.all().values_list("name", flat=True))    #Районы в селекс    posts2 = list(Areas.objects.all().values_list("name", flat=True))    #Метрополитены в селект    posts3 = list(Subways.objects.all().values_list("name", flat=True))    #Типы улиц    posts4 = list(Streets.objects.order_by().values_list('type', flat=True).distinct())    return render(request, "app/tabs/subtabs/building_add.html",{"posts1": posts1, "posts2": posts2, "posts3": posts3, "posts4": posts4 } )def getStreets(request):    streets = list(Streets.objects.filter(type = request.GET.get('type')).values_list("name", flat=True))    #Here is where I don't know if I am doing correctly    #I don't know how to send the client list or if I have to send it as a JSON    #Please help here    return JsonResponse({ 'names': streets }, status=200)