"""Definition of views."""from django.shortcuts import render, redirectfrom django.http import HttpRequestfrom django.http import HttpResponsefrom django.http import JsonResponsefrom django.core import serializersimport jsonfrom django.contrib.auth import authenticatefrom django.contrib.auth import login as log from django.contrib.auth import logout as lgoutfrom django.contrib.auth.forms import UserCreationFormfrom django.contrib import messagesfrom django.contrib.auth.decorators import login_requiredfrom django.db.models import Qfrom .models import *from .forms import *import loggingimport xlwtfrom datetime import datetimefrom django.http import FileResponsefrom django.contrib.staticfiles.storage import staticfiles_storagefrom docx import Documentfrom django.db.models import Maxfrom django.db.models import Minfrom datetime import datetime  from docx.shared import Inchesimport numpy as nploggerMS = logging.getLogger(__name__)#loggerMS.error('Something went wrong')@login_requireddef logger(request):    #Просмотр заказчиков    instances = Logger.objects.all().order_by('-id_log')    return render(request, "app/logger.html", {"instances": instances})#auth\regdef login(request):                      """Renders the home page."""    if request.user.is_authenticated:       return render(request, 'app/menu.html')    if request.POST.get('log'):        username = request.POST['username']        password = request.POST['password']        user = authenticate(request, username=username, password=password)        if user is not None:            log(request, user)            # Redirect to a success page.            return render(request, 'app/menu.html')        else:            # Return an 'invalid login' error message.            messages.error(request,'username or password not correct')            return redirect('login')                      return render(request, 'app/login.html')@login_requireddef register(request):    #Регистрация    if request.method == 'POST':        user_form = UserRegistrationForm(request.POST)        if user_form.is_valid():            try:                # Create a new user object but avoid saving it yet                new_user = user_form.save(commit=False)                # Set the chosen password                new_user.set_password(user_form.cleaned_data['password'])                # Save the User object                user_type = (request.POST.get('type', None))                if user_type != None:                    if user_type == "Аналитик":                        new_user.is_staff = True                                     elif user_type == "Администратор":                        new_user.is_superuser = True                  new_user.save()                #logger                last = User.objects.last()                massageToLog = "Пользователь с именем '%s' зарегистрирован. Исполняющий: '%s'" % (last.username, request.user.username)                log = Logger(info = massageToLog)                log.save()                return redirect('other_menu')            except Exception as e:                messages.error(request,'Что то пошло не так... Проверьте добавленные данные. Дополнительно: ' + str(e))                          return redirect('other_menu')    else:        user_form = UserRegistrationForm()    return render(request, 'app/register.html', {'user_form': user_form})#Menus@login_requireddef menu(request):        return render(request, "app/menu.html")@login_requireddef object_menu(request):      #sale = SalesAndPrices.objects.filter(year__gte = 2021, year__lte = 2021)    #loggerMS.error(sale)        #sections = Sections.objects.all()    #for i in sections:    #    if (i.attribute == "В продаже"):    #        sales = SalesAndPrices.objects.filter(id_sections = i).count()    #        if sales == 0:    #           today = datetime.now()    #            newSale = SalesAndPrices(id_sections = i, a1_to_sale = i.a1_num, a2_to_sale = i.a2_num, a3_to_sale = i.a3_num, a4_to_sale = i.a4_num, year = today.year, month = today.month)    #            newSale.save()            return render(request, "app/object_menu.html")@login_requireddef customer_menu(request):    return render(request, "app/customer_menu.html")@login_requireddef other_menu(request):    return render(request, "app/other_menu.html")def logout(request):    lgout(request)#customer's operation@login_requireddef customers_add(request):    #Формы собственности    posts1 = Ownership.objects.all()    if request.method == 'POST':        try:            try:                form = Ownership.objects.get(form = request.POST.get('form')) #Форма собственности            except Ownership.DoesNotExist:                form = None            if (request.POST.get('name') != "" and request.POST.get('name') != None):                cust_name = request.POST.get('name')  #Имя            else:                cust_name = ""            if (request.POST.get('phone') != "" and request.POST.get('phone') != None):                phoneNum = request.POST.get('phone')  #Телефон            else:                phoneNum = ""            if (request.POST.get('date') != "" and request.POST.get('date') != None):                year = request.POST.get('date')  #Год            else:                year = ""            custAdd = Customers(ownership = form, name = cust_name, phone = phoneNum, start_work = year)                      custAdd.save()            #logger            last = Customers.objects.last()            massageToLog = "Заказчик с именем '%s' добавлен. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            return redirect('customers_edit')        except Exception as e:            messages.error(request,'Что то пошло не так... Проверьте добавленные данные. Дополнительно: ' + str(e))                      return redirect('customers_edit')    return render(request, "app/customers_add.html", {"posts1": posts1})@login_requireddef customers_edit(request):    #Просмотр заказчиков    instances = Customers.objects.all().select_related('ownership')    if request.POST.get('edit'):        if (request.POST.get('selected') != "" and request.POST.get('selected') != None):            select = request.POST.get('selected')  #Имя        else:            select = None        request.session['select'] = select        return redirect('customers_edit_values')    if request.POST.get('new'):               return redirect('customers_add')        if request.POST.get('delete'):        try:            if (request.POST.get('selected') != "" and request.POST.get('selected') != None):                delete = request.POST.get('selected')  #Имя            else:                delete = None            #logger            last = Customers.objects.get(id_customer=delete)            massageToLog = "Заказчик с именем '%s' удален. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            last.delete()                          return redirect('customers_edit')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось удалить. Дополнительно: ' + str(e))                      return redirect('customers_edit')    return render(request, "app/customers_edit.html", {"instances": instances})@login_requireddef customers_edit_values(request):    #Формы собственности    cust = Customers.objects.select_related('ownership').get(pk = request.session['select'])    posts1 = Ownership.objects.all()    if request.method == 'POST':        try:            try:                formset = Ownership.objects.get(form = request.POST.get('form')) #Форма собственности            except Ownership.DoesNotExist:                formset = None            if (request.POST.get('name') != "" and request.POST.get('name') != None):                cust_name = request.POST.get('name')  #Имя            else:                cust_name = ""            if (request.POST.get('phone') != "" and request.POST.get('phone') != None):                phoneNum = request.POST.get('phone')  #Телефон            else:                phoneNum = ""            if (request.POST.get('date') != "" and request.POST.get('date') != None):                year = request.POST.get('date')  #Год            else:                year = ""            #logger            last = cust            massageToLog = "Заказчик с именем '%s' был отредактирован. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            cust.ownership = formset             cust.name = cust_name             cust.phone = phoneNum             cust.start_work = year             cust.save()            return redirect('customers_edit')        except Exception as e:            messages.error(request,'Что то пошло не так... Проверьте добавленные данные. Дополнительно: ' + str(e))                      return redirect('customers_edit_values')    return render(request, "app/customers_edit_values.html", {"posts1": posts1, "cust": cust})#AJAX@login_requireddef getStreets(request):    streets = list(Streets.objects.filter(type = request.GET.get('type')).values_list("name", flat=True).order_by("name"))    return JsonResponse({'names': streets }, status=200)@login_requireddef getSubways_multi(request):    subways = list(Subways.objects.filter(zone__in = request.GET.getlist('zone[]'), area__name__in = request.GET.getlist('areas[]')).values_list("name", flat=True))    return JsonResponse({'names': subways }, status=200)@login_requireddef getCityAreas_multi(request):    cityAreas = list(Areas.objects.filter(zone__in = request.GET.getlist('zone[]')).values_list("name", flat=True))    return JsonResponse({'names': cityAreas }, status=200)@login_requireddef getSubways(request):    subways = list(Subways.objects.filter(zone = request.GET.get('zone'), area__name = request.GET.get('area')).values_list("name", flat=True))    return JsonResponse({'names': subways }, status=200)@login_requireddef getCityAreas(request):    cityAreas = list(Areas.objects.filter(zone = request.GET.get('zone')).values_list("name", flat=True).order_by("name"))    return JsonResponse({'names': cityAreas }, status=200)@login_requireddef getSection(request):    try:        Section = list(Sections.objects.filter(id_house = request.GET.get('selected')).values_list(            "id_sections", "number", "attribute","financing__name","duplex_apartments",            "penthouses","apartments_num", "storeys", "avg_area","a1_num", "a1_area_min",             "a1_area_max","a2_num", "a2_area_min", "a2_area_max","a3_num",             "a3_area_min", "a3_area_max","a4_num", "a4_area_min", "a4_area_max"))        except:        return redirect('objects_review')    return JsonResponse({'objects': Section }, status=200)@login_requireddef getSales(request):    Sales = list(SalesAndPrices.objects.filter(id_sections = request.GET.get('selectedSection')).values_list(        "id_row", "year", "month",         "a1_to_sale", "a1_min_price", "a1_max_price", "a1_avg_price", "a1_area_to_sale",        "a2_to_sale", "a2_min_price", "a2_max_price", "a2_avg_price", "a2_area_to_sale",        "a3_to_sale", "a3_min_price", "a3_max_price", "a3_avg_price", "a3_area_to_sale",        "a4_to_sale", "a4_min_price", "a4_max_price", "a4_avg_price", "a4_area_to_sale",        "area_remain", "parking_price_min", "parking_price_max",        "dollar", "min_price", "max_price", "avg_price"))    return JsonResponse({'sales': Sales }, status=200)#reviews@login_requireddef objects_review(request):    #Редактирование и просмотр комплексов    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    try:        tech = Technical.objects.get(id_buildings = request.session['select'])    except:        tech = None    try:        fin = Finance.objects.get(id_buildings = request.session['select'])    except:        fin = None    try:        land = Land.objects.get(id_buildings = request.session['select'])    except:        land = None    try:        purpose = Purpose.objects.get(id_buildings = request.session['select'])    except:        purpose = None    try:        outdoor = Outdoor.objects.get(id_buildings = request.session['select'])    except:        outdoor = None    try:        additionally = Additionally.objects.get(id_buildings = request.session['select'])    except:        additionally = None    houses = Houses.objects.filter(id_buildings = request.session['select']).select_related('id_buildings')    SelectedSection = None    if ('selectSection' in request.session):        if request.session['selectSection']!= None:            SelectedSection = Sections.objects.get(id_sections = request.session['selectSection'])        else:            SelectedSection = None        if request.POST.get('delete_complex'):        try:            if 'select' in request.session:                delete = request.session['select']                #logger                last = Buildings.objects.get(id_buildings=delete)                massageToLog = "Комплекс с и именем '%s' удален. Исполняющий: '%s'" % (last.name, request.user.username)                log = Logger(info = massageToLog)                log.save()                last.delete()                request.session['selectSection'] = None                return redirect('objects_edit')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось удалить комплекс. Дополнительно: ' + str(e))                        return redirect('objects_review')    if request.POST.get('delete_house'):        try:            if request.POST.get('selected_house'):                delete = request.POST.get('selected_house')                #logger                last = Houses.objects.get(id_house=delete)                massageToLog = "Дом с номером '%s' удален из комплекса с именем '%s'. Исполняющий: '%s'" % (last.street_number, last.id_buildings.name, request.user.username)                log = Logger(info = massageToLog)                log.save()                last.delete()                request.session['selectSection'] = None                return redirect('objects_review')                 except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось удалить дом. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('delete_section'):        try:            if request.POST.get('selected_section'):                delete = request.POST.get('selected_section')                #logger                last = Sections.objects.get(id_sections=delete)                massageToLog = "Секция с номером '%s' удалена из дома с номером '%s' в комплексе '%s'. СЕКЦИИ ПРОНУМИРОВАНЫ ЗАНОВО. Исполняющий: '%s'" % (last.number, last.id_house.street_number, last.id_house.id_buildings.name ,request.user.username)                log = Logger(info = massageToLog)                log.save()                last.delete()                            request.session['selectSection'] = None                return redirect('objects_review')         except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось удалить секцию. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('sold_section'):        try:            if request.POST.get('selected_section'):                tochange = request.POST.get('selected_section')                sect = Sections.objects.get(id_sections=tochange)                sect.attribute = "Продано"                sect.save()                                request.session['selectSection'] = request.POST.get('selected_section')                return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось изменить значение. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('sale_section'):        try:            if request.POST.get('selected_section'):                tochange = request.POST.get('selected_section')                sect = Sections.objects.get(id_sections=tochange)                sect.attribute = "В продаже"                sect.save()                                 request.session['selectSection'] = request.POST.get('selected_section')                return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось изменить значение. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('edit_complex'):        return redirect('object_edit_complex')    if request.POST.get('edit_house'):        request.session['selected_house'] = request.POST.get('selected_house')        return redirect('object_edit_house')    if request.POST.get('edit_section'):        request.session['selected_section'] = request.POST.get('selected_section')        return redirect('object_edit_section')    if request.POST.get('add_house'):        return redirect('object_add_house')    if request.POST.get('add_section'):        return redirect('object_add_section')    if request.POST.get('update_sale'):               request.session['sectionSale'] =  request.POST.get('selected_section')        request.session['selectSection'] = request.POST.get('selected_section')        return redirect('object_add_sale')    if request.POST.get('edit_sale'):        request.session['selectSection'] = request.POST.get('selected_section')        request.session['selected_sales'] = request.POST.get('selected_sales')        return redirect('object_edit_sale')        if request.POST.get('delete_sale'):        request.session['selectSection'] = request.POST.get('selected_section')               SalesAndPrices.objects.last().delete()    if request.POST.get('cardPrint'):            document = Document(staticfiles_storage.path('app/content/card.docx'))        request.session['index'] = 0        #Главное        card(request, document, "Назва Об’єкту (Житлового комплексу):", str(complex.name))        if (complex.street_name != None):            card(request, document, "Адреса:", str(complex.street_name.type) + " " + str(complex.street_name.name))        card(request, document, "Район:", str(complex.urban_develop_zone))        if (complex.city_area != None):            card(request, document, "Мікрорайон:", str(complex.city_area.name))        card(request, document, "GPS Координати:", str(complex.gps))        card(request, document, "Сегмент комфортності:", str(complex.class_field))        card(request, document, "Сайт:", str(complex.url))        if (complex.customer != None):            card(request, document, "Девелопер:", str(complex.customer.name))        if (complex.customer != None):            card(request, document, "Контакт:", str(complex.customer.phone))        card(request, document, "Центр продажу:", str(complex.sell_center))        card(request, document, "Стан готовності на вересень 2021: (%)", "____")        card(request, document, "Генеральний підрядник:", str(complex.builder))        card(request, document, "Тип нерухомості:", str(complex.type_complex))        min_start_build = Houses.objects.filter(id_buildings__id_buildings = complex.id_buildings).aggregate(min=Min('start_year'))['min']        card(request, document, "Початок будівництва:", str(min_start_build))        max_start_build = Houses.objects.filter(id_buildings__id_buildings = complex.id_buildings).aggregate(max=Max('commis_year'))['max']        card(request, document, "Завершення будівництва:", str(max_start_build))        card_img(request, document, "Рендер Фасаду", complex.Render)        card_img(request, document, "Карта Розміщення", complex.map)        #Вартість:        card(request, document, "На початок будівництва:", "____")        card(request, document, "Паркінгу:", "____")        card(request, document, "Не житлових приміщень:", "____")        card(request, document, "На жовтень 2021р:", "____")        card(request, document, "Комірок:", "____")        card(request, document, "Середня вартість:", "____")        #Фінансування:        if fin != None:            card(request, document, "Перший внесок:", str(fin.contribution))            card(request, document, "Розтермінування:", str(fin.installment))            card(request, document, "Іпотека:", str(fin.mortgage))            card(request, document, "Знижка при оплаті 100%:", str(fin.discount_100))            card(request, document, "Знижки:", str(fin.discount))            card(request, document, "Банк:", str(fin.bank))        #Техніко – економічні показники:        card(request, document, "Загальна площа комплексу:", str(complex.total_area_complex))        min_storey = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(storeys = 0).aggregate(min=Min('storeys'))['min']        max_storey = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(storeys = 0).aggregate(max=Max('storeys'))['max']        if min == max and (min !=None and max !=None):            card(request, document, "Поверховість:", str(min_storey))        elif min != None and max != None:            card(request, document, "Поверховість:", str(min_storey) + "-" + str(max_storey))        card(request, document, "Комерційні приміщення:", str(complex.commerc))        section_count = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).count()          card(request, document, "Кількість секцій:", str(section_count))        house_count = Houses.objects.filter(id_buildings__id_buildings = complex.id_buildings).count()        card(request, document, "Кількість будинків:", str(house_count))        card(request, document, "Паркінг / к-ть місць:", str(complex.parking_num))        card(request, document, "Гостьовий паркінг/ к-ть місць:", str(complex.guest_parking_num))          #ttl_area_apartments        area = Houses.objects.filter(id_buildings__id_buildings = complex.id_buildings)        temp = 0        for i in area:            if i.ttl_area_apartments!= "" and i.ttl_area_apartments!=None:                temp = temp + i.ttl_area_apartments        card(request, document, "Загальна площа квартир:", str(temp))        card(request, document, "Площа вбудовано- прибудованих:", str(complex.build_in))        #Кількість квартир:        sections = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings)        a1 = 0        a2 = 0        a3 = 0        a4 = 0        for section in sections:            a1 = a1 + section.a1_num            a2 = a2 + section.a2_num            a3 = a3 + section.a3_num            a4 = a4 + section.a4_num        card(request, document, "Кількість 1-кім.:", str(a1))        card(request, document, "Кількість 2-кім.:", str(a2))        card(request, document, "Кількість 3-кім.:", str(a3))        card(request, document, "Кількість 4-кім. і більше:", str(a4))        #Площа квартир:               min1a = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(a1_area_min = 0).aggregate(min=Min('a1_area_min'))['min']        max1a = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(a1_area_max = 0).aggregate(max=Max('a1_area_max'))['max']        if min1a!= None and max1a != None:            card(request, document, "Площа 1-кім.:", str(min1a) + "-" + str(max1a))               min2a = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(a2_area_min = 0).aggregate(min=Min('a2_area_min'))['min']        max2a = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(a2_area_max = 0).aggregate(max=Max('a2_area_max'))['max']        if min2a!= None and max2a != None:            card(request, document, "Площа 2-кім.:", str(min2a) + "-" + str(max2a))        min3a = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(a3_area_min = 0).aggregate(min=Min('a3_area_min'))['min']        max3a = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(a3_area_max = 0).aggregate(max=Max('a3_area_max'))['max']        if min3a != None and max3a != None:            card(request, document, "Площа 3-кім.:", str(min3a) + "-" + str(max3a))        min4a = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(a4_area_min = 0).aggregate(min=Min('a4_area_min'))['min']        max4a = Sections.objects.filter(id_house__id_buildings__id_buildings = complex.id_buildings).exclude(a4_area_max = 0).aggregate(max=Max('a4_area_max'))['max']        if min4a != None and max4a != None:            card(request, document, "Площа 4-кім. і більше:", str(min4a) + "-" + str(max4a))        #Земля:        if land != None:            card(request, document, "Титул:", str(land.title))            card(request, document, "Площа земельної ділянки:", str(land.land_area))            card(request, document, "Кадастровий номер:", str(land.cadastral))            card(request, document, "Цільове призначення:", str(land.purpose))            card(request, document, "Відсоток забудови ділянки:", str(land.percentage))        #Технічні параметри:        if tech != None:            card(request, document, "Технологія каркасу:", str(tech.frame))            card(request, document, "Міжповерхове перекриття:", str(tech.overlap))            card(request, document, "Міжквартирні перегородки:", str(tech.partitions))            card(request, document, "Фасад:", str(tech.facade))            card(request, document, "Профіль та склопакет:", str(tech.profile))            card(request, document, "Тип опалення:", str(tech.heating))            card(request, document, "Тип даху:", str(tech.roof))            card(request, document, "Наявність терас:", str(tech.terraces))            card(request, document, "Висота стель:", str(tech.ceilings))            card(request, document, "Конструкційний матеріал:", str(tech.material))            card(request, document, "Зовнішні стіни:", str(tech.walls))            card(request, document, "Утеплення:", str(tech.warming))            card(request, document, "Вікна:", str(tech.windows))            card(request, document, "Виробник вікон:", str(tech.manuf_windows))            card(request, document, "Марка котла:", str(tech.boiler))            card(request, document, "Покрівля:", str(tech.roofing))            card(request, document, "Наявність балконів:", str(tech.balconies))            card(request, document, "Комплектність квартири:", str(tech.apartments))        #Призначення та інфраструктура:        if purpose != None:            card(request, document, "Типи соціальних об’єктів комплексу:", str(purpose.social_facilities))            card(request, document, "Дитячий майданчик:", str(purpose.playground))            card(request, document, "Комфорт:", str(purpose.comfort))            card(request, document, "Безпека:", str(purpose.security))            card(request, document, "Внутрішня інфраструктура:", str(purpose.infrastructure))            card(request, document, "Відпочинкові зони:", str(purpose.rest))            card(request, document, "Хол /гостьові зони:", str(purpose.halls))            card(request, document, "ІТ рішення/Розумний дім/Розумний ЖК:", str(purpose.solutions))            card(request, document, "Вело паркінги:", str(purpose.bicycle_parking))            card(request, document, "Місця для вигулу тварин:", str(purpose.animals))            card(request, document, "Доступ на територію комплексу:", str(purpose.access))            card(request, document, "Місця для зберігання:", str(purpose.storage))            card(request, document, "Консьєрж сервіс:", str(purpose.concierge))        #Зовнішня інфраструктура:        if outdoor != None:            card(request, document, "Розваги:", str(outdoor.entertainment))            card(request, document, "Транспорт:", str(outdoor.transport))            card(request, document, "Школа:", str(outdoor.school))            card(request, document, "Садок:", str(outdoor.kindergarten))            card(request, document, "Магазини:", str(outdoor.shops))        #Система продажу:        card(request, document, "Рейтинг ЖК покупців:", str(complex.rating))        card(request, document, "Оцінка Центру продажу:", str(complex.grade))        card(request, document, "Канали продажу:", " ")        card(request, document, "Рекламні активності:", " ")        #Додатково:        if additionally != None:            card(request, document, "Юридична схема продажу:", str(additionally.schemes))            card(request, document, "Сильні сторони проекту:", str(additionally.strengths))            card(request, document, "Слабкі сторони проекту:", str(additionally.weaknesses))            card(request, document, "Додатковий опис:", str(additionally.additional))        request.session['index'] = 0        document.save(staticfiles_storage.path('app/content/card_copy.docx'))        document = Document(staticfiles_storage.path('app/content/card_copy.docx'))        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document')        response['Content-Disposition'] = 'attachment; filename=card.docx'        document.save(response)        return response    return render(request, "app/objects_review.html", {"complex": complex, "houses": houses, "SelectedSection": SelectedSection, "tech": tech, "fin": fin, "land": land,                                                        "purpose": purpose, "outdoor": outdoor, "additionally": additionally})@login_requireddef sections_review(request):    #Просмотр всех комплексов    instances = Sections.objects.filter(attribute = "В продаже").select_related('id_house', 'financing')     if request.POST.get('review'):        if (request.POST.get('selected') != "" and request.POST.get('selected') != None):            selectSection = request.POST.get('selected')  #Имя            section = Sections.objects.get(id_sections = selectSection)            complx = Buildings.objects.get(id_buildings = section.id_house.id_buildings.id_buildings)            request.session['select'] = complx.id_buildings            request.session['selectSection'] = selectSection            return redirect('objects_review')     return render(request, "app/sections_review.html", {"instances": instances})@login_requireddef objects_edit(request):    filtered = "В продаже"    #Просмотр всех комплексов    instances = Buildings.objects.all().select_related('street_name', 'customer', 'city_area', 'subway')     if request.POST.get('review'):        if (request.POST.get('selected') != "" and request.POST.get('selected') != None):            select = request.POST.get('selected')  #Имя        else:            select = None        request.session['select'] = select        return redirect('objects_review')         if request.POST.get('filter'):        if request.POST.get('filter') == "В продаже":            filtered = "В продаже"        elif request.POST.get('filter') == "В персперктиве":            filtered = "В персперктиве"        elif request.POST.get('filter') == "Все":            filtered = "Все"    if filtered == "Все":        instances = Buildings.objects.all().select_related('street_name', 'customer', 'city_area', 'subway')    if filtered == "В продаже":        vals = []        SectionsSale = Sections.objects.filter(attribute = "В продаже")        for row in SectionsSale:            if row.id_house.id_buildings.id_buildings in vals:                pass            else:                vals.append(row.id_house.id_buildings.id_buildings)        instances = Buildings.objects.filter(pk__in = vals).select_related('street_name', 'customer', 'city_area', 'subway')    if filtered == "В персперктиве":        vals = []        SectionsSale = Sections.objects.filter(attribute = "Перспектива")        for row in SectionsSale:            if row.id_house.id_buildings.id_buildings in vals:                pass            else:                vals.append(row.id_house.id_buildings.id_buildings)        instances = Buildings.objects.filter(pk__in = vals).select_related('street_name', 'customer', 'city_area', 'subway')    return render(request, "app/objects_edit.html", {"instances": instances, "filtered": filtered})#House operationdef house_editing(request, i):    global num_build    global area_build    global area_apart    global storeys_num    global phase    global info    global date_start    global start_quarter    global date_commis    global quarter    global parking_nums    num_build = request.POST.get('num-build' + str(i))  #№ дома    if (request.POST.get('area-build' + str(i)) != "" and request.POST.get('area-build' + str(i)) != None):        area_build = float(request.POST.get('area-build' + str(i)))  #Площадь дома    else:        area_build = 0    if (request.POST.get('area-apart' + str(i)) != "" and request.POST.get('area-apart' + str(i)) != None):        area_apart = float(request.POST.get('area-apart' + str(i)))  #Площадь квартир    else:        area_apart = 0    if (request.POST.get('num-storeys' + str(i)) != "" and request.POST.get('num-storeys' + str(i)) != None):        storeys_num = (request.POST.get('num-storeys' + str(i))) #Этажность    else:        storeys_num = ""    if (request.POST.get('constr-phase-prc' + str(i)) != "" and request.POST.get('constr-phase-prc' + str(i)) != None):        phase = request.POST.get('constr-phase-prc' + str(i)) #Этап постройки    else:        phase = 0    if (request.POST.get('info-house' + str(i)) != "" and request.POST.get('info-house' + str(i)) != None):        info = request.POST.get('info-house' + str(i)) #Примечание    else:        info = ""                     if (request.POST.get('date-pick-start' + str(i)) != "" and request.POST.get('date-pick-start' + str(i)) != None):        date_start = request.POST.get('date-pick-start' + str(i)) #Год начала    else:        date_start = ""     if (request.POST.get('quarter-pick-start' + str(i)) != "" and request.POST.get('quarter-pick-start' + str(i)) != None):        start_quarter = request.POST.get('quarter-pick-start' + str(i)) #Квартал    else:        start_quarter = 0       if (request.POST.get('date-pick-commis' + str(i)) != "" and request.POST.get('date-pick-commis' + str(i)) != None):        date_commis = request.POST.get('date-pick-commis' + str(i)) #Год ввода    else:        date_commis = ""         if (request.POST.get('quarter-pick' + str(i)) != "" and request.POST.get('quarter-pick' + str(i)) != None):        quarter = int(request.POST.get('quarter-pick' + str(i))) #Квартал    else:        quarter = 0         if (request.POST.get('num-parking-down' + str(i)) != "" and request.POST.get('num-parking-down' + str(i)) != None):        parking_nums = int(request.POST.get('num-parking-down' + str(i))) #Стоимость    else:        parking_nums = 0    return num_build@login_requireddef object_add_house(request):    #комплекс    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #дома    houses = list(Houses.objects.filter(id_buildings = complex).values_list("street_number", flat = True))    if request.POST.get('save'):        try:                   counts = request.POST.get('counts-houses') #Количество домов            for i in range(1, int(counts) + 1):                                house_editing(request, i)                houseAdd = Houses(id_buildings = complex, street_number = num_build, ttl_area_building = area_build, ttl_area_apartments = area_apart,                                         storeys = storeys_num, construction_phase_prst = phase, parking_num = parking_nums,                                        remark = info, start_year = date_start, quarter_start = start_quarter, commis_year = date_commis, quarter = quarter)                           houseAdd.save()                             #logger            last = Houses.objects.last()            massageToLog = "Дом с номером '%s' добавлен к комплексу '%s'. Исполнящий: '%s'" % (last.street_number, last.id_buildings.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить изменения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_add_house.html", {"complex": complex, "houses": json.dumps(houses)})@login_requireddef object_edit_house(request):        #дом    house = Houses.objects.select_related('id_buildings').get(pk = request.session['selected_house'])    #комплекс    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #Дома    houses = list(Houses.objects.filter(id_buildings = complex).values_list("street_number", flat = True))    if request.POST.get('save'):        try:            #logger            last = house            massageToLog = "Дом с номером '%s' был отредактирован для комплекса c именем '%s'. Исполнящий: '%s'" % ( last.street_number, last.id_buildings.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            house_editing(request, "")                    house.street_number = num_build            loggerMS.error(num_build)            house.ttl_area_building = area_build             house.ttl_area_apartments = area_apart            house.storeys = storeys_num            house.construction_phase_prst = phase            house.parking_num = parking_nums                     house.remark = info            house.start_year = date_start            house.quarter_start = start_quarter            house.commis_year = date_commis            house.quarter = quarter                       house.save()             return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить изменения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_edit_house.html", {"house": house, "complex": complex, "houses":  json.dumps(houses)})    #Section operationdef section_editing(request, i, complex):    global houseId    global sect_num_req    global sale    global financ    global dupl    global penth    global storeys_req     global numApartTtl    global avgArea    global numApartOne    global minAreaOne    global maxAreaOne    global numApartTwo    global minAreaTwo    global maxAreaTwo    global numApartThree    global minAreaThree    global maxAreaThree    global numApartFour    global minAreaFour    global maxAreaFour    try:        houseId = Houses.objects.get(street_number = request.POST.get('num-section-house' + str(i)), id_buildings = complex)  #№ дом    except Houses.DoesNotExist:        pass       sale = request.POST.get('sales' + str(i), "")  #Продажи    try:        financ = Financing.objects.get(name = request.POST.get('finance' + str(i))) #Финансирование    except Financing.DoesNotExist:        financ = None           if (request.POST.get('sect_num' + str(i)) != "" and request.POST.get('sect_num' + str(i)) != None): #Номер секции        sect_num_req = request.POST.get('sect_num' + str(i))    else:        sect_num_req = ""      if (request.POST.get('duplex' + str(i)) != "" and request.POST.get('duplex' + str(i)) != None): #Дюплекс        dupl = request.POST.get('duplex' + str(i))    else:        dupl = ""       if (request.POST.get('penthouse' + str(i)) != "" and request.POST.get('penthouse' + str(i)) != None): #Пентхаусы        penth = request.POST.get('penthouse' + str(i))    else:        penth = ""       if (request.POST.get('storeys-apart' + str(i)) != "" and request.POST.get('storeys-apart' + str(i)) != None): #Пентхаусы        storeys_req = request.POST.get('storeys-apart' + str(i))    else:        storeys_req = 0     #Квартиры.  От 1км до 4км    if (request.POST.get('num-apart-ttl' + str(i)) != "" and request.POST.get('num-apart-ttl' + str(i)) != None):        numApartTtl = int(request.POST.get('num-apart-ttl' + str(i)))    else:        numApartTtl = 0       if (request.POST.get('avg-area' + str(i)) != "" and request.POST.get('avg-area' + str(i)) != None):        avgArea = float(request.POST.get('avg-area' + str(i)))    else:        avgArea = 0       if (request.POST.get('num-apart-one' + str(i)) != "" and request.POST.get('num-apart-one' + str(i)) != None):        numApartOne = int(request.POST.get('num-apart-one' + str(i)))    else:        numApartOne = 0     if (request.POST.get('min-area-one' + str(i)) != "" and request.POST.get('min-area-one' + str(i)) != None):        minAreaOne = float(request.POST.get('min-area-one' + str(i)))    else:        minAreaOne = 0     if (request.POST.get('max-area-one' + str(i)) != "" and request.POST.get('max-area-one' + str(i)) != None):        maxAreaOne = float(request.POST.get('max-area-one' + str(i)))    else:        maxAreaOne = 0     if (request.POST.get('num-apart-two' + str(i)) != "" and request.POST.get('num-apart-two' + str(i)) != None):        numApartTwo = int(request.POST.get('num-apart-two' + str(i)))    else:        numApartTwo = 0     if (request.POST.get('min-area-two' + str(i)) != "" and request.POST.get('min-area-two' + str(i)) != None):        minAreaTwo = float(request.POST.get('min-area-two' + str(i)))    else:        minAreaTwo = 0                 if (request.POST.get('max-area-two' + str(i)) != "" and request.POST.get('max-area-two' + str(i)) != None):        maxAreaTwo = float(request.POST.get('max-area-two' + str(i)))    else:        maxAreaTwo = 0     if (request.POST.get('num-apart-three' + str(i)) != "" and request.POST.get('num-apart-three' + str(i)) != None):        numApartThree = int(request.POST.get('num-apart-three' + str(i)))    else:        numApartThree = 0     if (request.POST.get('min-area-three' + str(i)) != "" and request.POST.get('min-area-three' + str(i)) != None):        minAreaThree = float(request.POST.get('min-area-three' + str(i)))    else:        minAreaThree = 0     if (request.POST.get('max-area-three' + str(i)) != "" and request.POST.get('max-area-three' + str(i)) != None):        maxAreaThree = float(request.POST.get('max-area-three' + str(i)))    else:        maxAreaThree = 0     if (request.POST.get('num-apart-four' + str(i)) != "" and request.POST.get('num-apart-four' + str(i)) != None):        numApartFour = int(request.POST.get('num-apart-four' + str(i)))    else:        numApartFour = 0    if (request.POST.get('min-area-four' + str(i)) != "" and request.POST.get('min-area-four' + str(i)) != None):        minAreaFour = float(request.POST.get('min-area-four' + str(i)))    else:        minAreaFour = 0    if (request.POST.get('max-area-four' + str(i)) != "" and request.POST.get('max-area-four' + str(i)) != None):        maxAreaFour = float(request.POST.get('max-area-four' + str(i)))    else:        maxAreaFour = 0@login_requireddef object_edit_section(request):    #Секции    section = Sections.objects.select_related('id_house', 'financing',).get(pk = request.session['selected_section'])    #Комплекс    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #Финансирование    posts5 = list(Financing.objects.order_by().values_list('name', flat=True))    #Дома    houses_num = list(Houses.objects.filter(id_buildings = request.session['select']).values_list('street_number', flat=True))    #Выбранный дом    num = section.id_house.id_house    selected_num = (Houses.objects.get(id_house = num))    if request.POST.get('save'):        try:            #logger            last = section            massageToLog = "Секция с номером '%s' была отредактирована для дома c номером '%s' в комплексе '%s'. Исполняющий: '%s'" % (last.number, last.id_house.street_number, last.id_house.id_buildings.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            section_editing(request, "", complex)                            section.id_house = houseId            section.number = sect_num_req            section.attribute = sale            section.financing = financ            section.duplex_apartments = dupl            section.penthouses = penth            section.storeys = storeys_req            section.apartments_num = numApartTtl            section.a1_num = numApartOne            section.a2_num = numApartTwo            section.a3_num = numApartThree            section.a4_num = numApartFour            section.a1_area_min = minAreaOne            section.a1_area_max = maxAreaOne            section.a2_area_min = minAreaTwo            section.a2_area_max = maxAreaTwo            section.a3_area_min = minAreaThree            section.a3_area_max = maxAreaThree            section.a4_area_min = minAreaFour            section.a4_area_max = maxAreaFour            section.avg_area = avgArea            section.save()                      request.session['selectSection'] = request.session['selected_section']            return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить изменения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_edit_section.html", {"section": section, "complex": complex, "posts5": posts5, "houses_num": houses_num,                                                            "selected_num": selected_num.street_number})@login_requireddef object_add_section(request):    #Комплекс    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #Финансирование    posts5 = list(Financing.objects.order_by().values_list('name', flat=True))    #Дома    houses_num = list(Houses.objects.filter(id_buildings = request.session['select']).values_list('street_number', flat=True))    if request.POST.get('save'):                counts_second = request.POST.get('counts-sections') #Количество домов        for i in range(1, int(counts_second) + 1):            section_editing(request, i, complex)                    sectionAdd = Sections(id_house = houseId, number = sect_num_req, attribute = sale, financing = financ, duplex_apartments = dupl, penthouses = penth, storeys = storeys_req,                                    apartments_num = numApartTtl, a1_num = numApartOne, a2_num = numApartTwo, a3_num = numApartThree, a4_num = numApartFour,                                     a1_area_min = minAreaOne, a1_area_max = maxAreaOne, a2_area_min = minAreaTwo, a2_area_max = maxAreaTwo, a3_area_min = minAreaThree,                                    a3_area_max = maxAreaThree, a4_area_min = minAreaFour,  a4_area_max = maxAreaFour, avg_area = avgArea)            sectionAdd.save()                sectLast = Sections.objects.last()            today = datetime.now()            if (sale == "В продаже"):                newSale = SalesAndPrices(id_sections = sectLast, a1_to_sale = numApartOne, a2_to_sale = numApartTwo, a3_to_sale = numApartThree, a4_to_sale = numApartFour, year = today.year, month = today.month)                newSale.save()            #logger            last = Sections.objects.last()            massageToLog = "Секция с номером '%s' добавлена для дома с номером '%s' для комплекса '%s'. Исполняющий: '%s'" % (last.number, last.id_house.street_number, last.id_house.id_buildings.name ,request.user.username)            log = Logger(info = massageToLog)            log.save()                   return redirect('objects_review')            return render(request, "app/object_add_section.html", { "complex": complex, "posts5": posts5, "houses_num": houses_num})#Sale operation@login_requireddef object_add_sale(request):    section = Sections.objects.get(id_sections = request.session['sectionSale'])    sales = SalesAndPrices.objects.filter(id_sections = section)    if sales.count() != 0:        last = SalesAndPrices.objects.filter(id_sections = section).last()    else:        last = None        if request.POST.get('save'):        try:            if (request.POST.get('dollar') != "" and request.POST.get('dollar') != None): #Дюплекс                dol = request.POST.get('dollar')            else:                dol = 0              if (request.POST.get('year') != "" and request.POST.get('year') != None): #Дюплекс                years = request.POST.get('year')            else:                years = 0            if (request.POST.get('month') != "" and request.POST.get('month') != None): #Дюплекс                months = request.POST.get('month')            else:                months = 0            if (request.POST.get('MinParkingPrice') != "" and request.POST.get('MinParkingPrice') != None): #Дюплекс                MinParkingPrice = request.POST.get('MinParkingPrice')            else:                MinParkingPrice = 0            if (request.POST.get('MaxParkingPrice') != "" and request.POST.get('MaxParkingPrice') != None): #Дюплекс                MaxParkingPrice = request.POST.get('MaxParkingPrice')            else:                MaxParkingPrice = 0            if (request.POST.get('ParkingPrice') != "" and request.POST.get('ParkingPrice') != None): #Дюплекс                ParkingPrice = request.POST.get('ParkingPrice')            else:                ParkingPrice = 0            if (request.POST.get('TtlAreaRemain') != "" and request.POST.get('TtlAreaRemain') != None): #Дюплекс                TtlAreaRemain = request.POST.get('TtlAreaRemain')            else:                TtlAreaRemain = 0            if (request.POST.get('TtlMinPrice') != "" and request.POST.get('TtlMinPrice') != None): #Дюплекс                TtlMinPrice = request.POST.get('TtlMinPrice')            else:                TtlMinPrice = 0            if (request.POST.get('TtlMaxPrice') != "" and request.POST.get('TtlMaxPrice') != None): #Дюплекс                TtlMaxPrice = request.POST.get('TtlMaxPrice')            else:                TtlMaxPrice = 0            if (request.POST.get('TtlAvgPrice') != "" and request.POST.get('TtlAvgPrice') != None): #Дюплекс                TtlAvgPrice = request.POST.get('TtlAvgPrice')            else:                TtlAvgPrice = 0            if (request.POST.get('Ttl1Ap') != "" and request.POST.get('Ttl1Ap') != None): #Дюплекс                Ttl1Ap = request.POST.get('Ttl1Ap')            else:                Ttl1Ap = 0            if (request.POST.get('Min1ApPrice') != "" and request.POST.get('Min1ApPrice') != None): #Дюплекс                Min1ApPrice = request.POST.get('Min1ApPrice')            else:                Min1ApPrice = 0            if (request.POST.get('Max1ApPrice') != "" and request.POST.get('Max1ApPrice') != None): #Дюплекс                Max1ApPrice = request.POST.get('Max1ApPrice')            else:                Max1ApPrice = 0            if (request.POST.get('Avg1ApPrice') != "" and request.POST.get('Avg1ApPrice') != None): #Дюплекс                Avg1pPrice = request.POST.get('Avg1ApPrice')            else:                Avg1pPrice = 0            if (request.POST.get('Area1ApRemain') != "" and request.POST.get('Area1ApRemain') != None): #Дюплекс                Area1ApRemain = request.POST.get('Area1ApRemain')            else:                Area1ApRemain = 0            if (request.POST.get('Ttl2Ap') != "" and request.POST.get('Ttl2Ap') != None): #Дюплекс                Ttl2Ap = request.POST.get('Ttl2Ap')            else:                Ttl2Ap = 0            if (request.POST.get('Min2ApPrice') != "" and request.POST.get('Min2ApPrice') != None): #Дюплекс                Min2ApPrice = request.POST.get('Min2ApPrice')            else:                Min2ApPrice = 0            if (request.POST.get('Max2ApPrice') != "" and request.POST.get('Max2ApPrice') != None): #Дюплекс                Max2ApPrice = request.POST.get('Max2ApPrice')            else:                Max2ApPrice = 0            if (request.POST.get('Avg2ApPrice') != "" and request.POST.get('Avg2ApPrice') != None): #Дюплекс                Avg2pPrice = request.POST.get('Avg2ApPrice')            else:                Avg2pPrice = 0            if (request.POST.get('Area2ApRemain') != "" and request.POST.get('Area2ApRemain') != None): #Дюплекс                Area2ApRemain = request.POST.get('Area2ApRemain')            else:                Area2ApRemain = 0            if (request.POST.get('Ttl3Ap') != "" and request.POST.get('Ttl3Ap') != None): #Дюплекс                Ttl3Ap = request.POST.get('Ttl3Ap')            else:                Ttl3Ap = 0            if (request.POST.get('Min3ApPrice') != "" and request.POST.get('Min3ApPrice') != None): #Дюплекс                Min3ApPrice = request.POST.get('Min3ApPrice')            else:                Min3ApPrice = 0            if (request.POST.get('Max3ApPrice') != "" and request.POST.get('Max3ApPrice') != None): #Дюплекс                Max3ApPrice = request.POST.get('Max3ApPrice')            else:                Max3ApPrice = 0            if (request.POST.get('Avg3ApPrice') != "" and request.POST.get('Avg3ApPrice') != None): #Дюплекс                Avg3pPrice = request.POST.get('Avg3ApPrice')            else:                Avg3pPrice = 0            if (request.POST.get('Area3ApRemain') != "" and request.POST.get('Area3ApRemain') != None): #Дюплекс                Area3ApRemain = request.POST.get('Area3ApRemain')            else:                Area3ApRemain = 0            if (request.POST.get('Ttl4Ap') != "" and request.POST.get('Ttl4Ap') != None): #Дюплекс                Ttl4Ap = request.POST.get('Ttl4Ap')            else:                Ttl4Ap = 0            if (request.POST.get('Min4ApPrice') != "" and request.POST.get('Min4ApPrice') != None): #Дюплекс                Min4ApPrice = request.POST.get('Min4ApPrice')            else:                Min4ApPrice = 0            if (request.POST.get('Max4ApPrice') != "" and request.POST.get('Max4ApPrice') != None): #Дюплекс                Max4ApPrice = request.POST.get('Max4ApPrice')            else:                Max4ApPrice = 0            if (request.POST.get('Avg4ApPrice') != "" and request.POST.get('Avg4ApPrice') != None): #Дюплекс                Avg4pPrice = request.POST.get('Avg4ApPrice')            else:                Avg4pPrice = 0            if (request.POST.get('Area4ApRemain') != "" and request.POST.get('Area4ApRemain') != None): #Дюплекс                Area4ApRemain = request.POST.get('Area4ApRemain')            else:                Area4ApRemain = 0            NewSale =  SalesAndPrices(id_sections = section, dollar = dol, year = years, month = months, parking_price_min = MinParkingPrice,                                       parking_price_max = MaxParkingPrice, area_remain = TtlAreaRemain, min_price = TtlMinPrice, max_price = TtlMaxPrice, avg_price = TtlAvgPrice,                                       a1_to_sale = Ttl1Ap , a1_min_price = Min1ApPrice, a1_max_price = Max1ApPrice, a1_avg_price = Avg1pPrice, a1_area_to_sale = Area1ApRemain,                                      a2_to_sale = Ttl2Ap , a2_min_price = Min2ApPrice, a2_max_price = Max2ApPrice, a2_avg_price = Avg2pPrice, a2_area_to_sale = Area2ApRemain,                                      a3_to_sale = Ttl3Ap , a3_min_price = Min3ApPrice, a3_max_price = Max3ApPrice, a3_avg_price = Avg3pPrice, a3_area_to_sale = Area3ApRemain,                                      a4_to_sale = Ttl4Ap , a4_min_price = Min4ApPrice, a4_max_price = Max4ApPrice, a4_avg_price = Avg4pPrice, a4_area_to_sale = Area4ApRemain)            NewSale.save()            return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить значения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_add_sale.html", {"section": section, "last": last})@login_requireddef object_edit_sale(request):    section = Sections.objects.get(id_sections = request.session['selectSection'])    saleId = request.session['selected_sales']    sales = SalesAndPrices.objects.get(id_row = saleId)        if request.POST.get('save'):        try:            if (request.POST.get('dollar') != "" and request.POST.get('dollar') != None): #Дюплекс                dol = request.POST.get('dollar')            else:                dol = 0              if (request.POST.get('year') != "" and request.POST.get('year') != None): #Дюплекс                years = request.POST.get('year')            else:                years = 0            if (request.POST.get('month') != "" and request.POST.get('month') != None): #Дюплекс                months = request.POST.get('month')            else:                months = 0            if (request.POST.get('MinParkingPrice') != "" and request.POST.get('MinParkingPrice') != None): #Дюплекс                MinParkingPrice = request.POST.get('MinParkingPrice')            else:                MinParkingPrice = 0            if (request.POST.get('MaxParkingPrice') != "" and request.POST.get('MaxParkingPrice') != None): #Дюплекс                MaxParkingPrice = request.POST.get('MaxParkingPrice')            else:                MaxParkingPrice = 0            if (request.POST.get('ParkingPrice') != "" and request.POST.get('ParkingPrice') != None): #Дюплекс                ParkingPrice = request.POST.get('ParkingPrice')            else:                ParkingPrice = 0            if (request.POST.get('TtlAreaRemain') != "" and request.POST.get('TtlAreaRemain') != None): #Дюплекс                TtlAreaRemain = request.POST.get('TtlAreaRemain')            else:                TtlAreaRemain = 0            if (request.POST.get('TtlMinPrice') != "" and request.POST.get('TtlMinPrice') != None): #Дюплекс                TtlMinPrice = request.POST.get('TtlMinPrice')            else:                TtlMinPrice = 0            if (request.POST.get('TtlMaxPrice') != "" and request.POST.get('TtlMaxPrice') != None): #Дюплекс                TtlMaxPrice = request.POST.get('TtlMaxPrice')            else:                TtlMaxPrice = 0            if (request.POST.get('TtlAvgPrice') != "" and request.POST.get('TtlAvgPrice') != None): #Дюплекс                TtlAvgPrice = request.POST.get('TtlAvgPrice')            else:                TtlAvgPrice = 0            if (request.POST.get('Ttl1Ap') != "" and request.POST.get('Ttl1Ap') != None): #Дюплекс                Ttl1Ap = request.POST.get('Ttl1Ap')            else:                Ttl1Ap = 0            if (request.POST.get('Min1ApPrice') != "" and request.POST.get('Min1ApPrice') != None): #Дюплекс                Min1ApPrice = request.POST.get('Min1ApPrice')            else:                Min1ApPrice = 0            if (request.POST.get('Max1ApPrice') != "" and request.POST.get('Max1ApPrice') != None): #Дюплекс                Max1ApPrice = request.POST.get('Max1ApPrice')            else:                Max1ApPrice = 0            if (request.POST.get('Avg1ApPrice') != "" and request.POST.get('Avg1ApPrice') != None): #Дюплекс                Avg1pPrice = request.POST.get('Avg1ApPrice')            else:                Avg1pPrice = 0            if (request.POST.get('Area1ApRemain') != "" and request.POST.get('Area1ApRemain') != None): #Дюплекс                Area1ApRemain = request.POST.get('Area1ApRemain')            else:                Area1ApRemain = 0            if (request.POST.get('Ttl2Ap') != "" and request.POST.get('Ttl2Ap') != None): #Дюплекс                Ttl2Ap = request.POST.get('Ttl2Ap')            else:                Ttl2Ap = 0            if (request.POST.get('Min2ApPrice') != "" and request.POST.get('Min2ApPrice') != None): #Дюплекс                Min2ApPrice = request.POST.get('Min2ApPrice')            else:                Min2ApPrice = 0            if (request.POST.get('Max2ApPrice') != "" and request.POST.get('Max2ApPrice') != None): #Дюплекс                Max2ApPrice = request.POST.get('Max2ApPrice')            else:                Max2ApPrice = 0            if (request.POST.get('Avg2ApPrice') != "" and request.POST.get('Avg2ApPrice') != None): #Дюплекс                Avg2pPrice = request.POST.get('Avg2ApPrice')            else:                Avg2pPrice = 0            if (request.POST.get('Area2ApRemain') != "" and request.POST.get('Area2ApRemain') != None): #Дюплекс                Area2ApRemain = request.POST.get('Area2ApRemain')            else:                Area2ApRemain = 0            if (request.POST.get('Ttl3Ap') != "" and request.POST.get('Ttl3Ap') != None): #Дюплекс                Ttl3Ap = request.POST.get('Ttl3Ap')            else:                Ttl3Ap = 0            if (request.POST.get('Min3ApPrice') != "" and request.POST.get('Min3ApPrice') != None): #Дюплекс                Min3ApPrice = request.POST.get('Min3ApPrice')            else:                Min3ApPrice = 0            if (request.POST.get('Max3ApPrice') != "" and request.POST.get('Max3ApPrice') != None): #Дюплекс                Max3ApPrice = request.POST.get('Max3ApPrice')            else:                Max3ApPrice = 0            if (request.POST.get('Avg3ApPrice') != "" and request.POST.get('Avg3ApPrice') != None): #Дюплекс                Avg3pPrice = request.POST.get('Avg3ApPrice')            else:                Avg3pPrice = 0            if (request.POST.get('Area3ApRemain') != "" and request.POST.get('Area3ApRemain') != None): #Дюплекс                Area3ApRemain = request.POST.get('Area3ApRemain')            else:                Area3ApRemain = 0            if (request.POST.get('Ttl4Ap') != "" and request.POST.get('Ttl4Ap') != None): #Дюплекс                Ttl4Ap = request.POST.get('Ttl4Ap')            else:                Ttl4Ap = 0            if (request.POST.get('Min4ApPrice') != "" and request.POST.get('Min4ApPrice') != None): #Дюплекс                Min4ApPrice = request.POST.get('Min4ApPrice')            else:                Min4ApPrice = 0            if (request.POST.get('Max4ApPrice') != "" and request.POST.get('Max4ApPrice') != None): #Дюплекс                Max4ApPrice = request.POST.get('Max4ApPrice')            else:                Max4ApPrice = 0            if (request.POST.get('Avg4ApPrice') != "" and request.POST.get('Avg4ApPrice') != None): #Дюплекс                Avg4pPrice = request.POST.get('Avg4ApPrice')            else:                Avg4pPrice = 0            if (request.POST.get('Area4ApRemain') != "" and request.POST.get('Area4ApRemain') != None): #Дюплекс                Area4ApRemain = request.POST.get('Area4ApRemain')            else:                Area4ApRemain = 0            sales.dollar = dol            sales.year = years            sales.month = months            sales.parking_price_min = MinParkingPrice            sales.parking_price_max = MaxParkingPrice            sales.area_remain = TtlAreaRemain            sales.min_price = TtlMinPrice            sales.max_price = TtlMaxPrice            sales.avg_price = TtlAvgPrice            sales.a1_to_sale = Ttl1Ap            sales.a1_min_price = Min1ApPrice            sales.a1_max_price = Max1ApPrice            sales.a1_avg_price = Avg1pPrice            sales.a1_area_to_sale = Area1ApRemain            sales.a2_to_sale = Ttl2Ap            sales.a2_min_price = Min2ApPrice            sales.a2_max_price = Max2ApPrice            sales.a2_avg_price = Avg2pPrice            sales.a2_area_to_sale = Area2ApRemain            sales.a3_to_sale = Ttl3Ap            sales.a3_min_price = Min3ApPrice            sales.a3_max_price = Max3ApPrice            sales.a3_avg_price = Avg3pPrice            sales.a3_area_to_sale = Area3ApRemain            sales.a4_to_sale = Ttl4Ap            sales.a4_min_price = Min4ApPrice            sales.a4_max_price = Max4ApPrice            sales.a4_avg_price = Avg4pPrice            sales.a4_area_to_sale = Area4ApRemain            sales.save()            return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить значения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_edit_sale.html", {"section": section, "sales": sales})#Complex operationdef complex_editing(request):    global classType    global complexType    global complexName    global streetName    global customerName    global builderName    global zoneName    global subwayName    global cityAreaName    global parkingExist    global parkingType    global parkingNum    global guestParkingNum    global link    global gps_req    global sell_center_req    global total_area_complex_req    global build_in_req    global commerc_req    global rating_req    global grade_req    global render_req    global map_req    #cards    #tech    global frame_req    global overlap_req    global partitions_req    global facade_req    global profile_req    global heating_req    global roof_req    global terraces_req    global ceilings_req    global material_req    global walls_req    global warming_req    global windows_req    global manuf_windows_req    global boiler_req    global roofing_req    global balconies_req    global apartments_req    #fin    global contribution_req    global installment_req    global mortgage_req    global discount_100_req    global discount_req    global bank_req    #land    global title_req    global land_area_req    global cadastral_req    global purpose_req    global percentage_req    #purpose    global social_facilities_req    global playground_req    global comfort_req    global security_req    global infrastructure_req    global rest_req    global halls_req    global solutions_req    global bicycle_parking_req    global animals_req    global access_req    global storage_req    global concierge_req    #Outdoor    global entertainment_req    global transport_req    global school_req    global kindergarten_req    global shops_req    #additionally    global schemes_req    global strengths_req    global weaknesses_req    global additional_req    classType = request.POST.get('class-select')  #класс    complexType = request.POST.get('complex-type') #тип    complexName = request.POST.get('complex-name')  #Название    try:        checkStreet = Streets.objects.filter(name = request.POST.get('name-streets'), type = request.POST.get('type-streets')).first()    except Streets.DoesNotExist:        streetName = None          else:               streetName = checkStreet  #Улица    try:        checkCustomer = Customers.objects.filter(name = request.POST.get('customer')).first()    except Customers.DoesNotExist:        customerName = None        else:                 customerName = checkCustomer  #Заказчик    if (request.POST.get('builder') != ""):        builderName = request.POST.get('builder')  #Генподрядчик    else:        builderName = ""                   try:        checkSubway = Subways.objects.filter(name = request.POST.get('subway')).first()    except Subways.DoesNotExist:        subwayName = None               else:                 subwayName = checkSubway  #Метро    try:        checkArea = Areas.objects.filter(name =  request.POST.get('city-area')).first()    except Areas.DoesNotExist:        cityAreaName = None                 else:                 cityAreaName = checkArea  #Район    zoneName = request.POST.get('urban-zone', "")    parkingExist = request.POST.get('parking', "")  #Парковка    parkingType = request.POST.get('parking-type', "")  #Тип парковки            if (request.POST.get('num-parking-up') != "" and request.POST.get('num-parking-up') != None):        parkingNum = int(request.POST.get('num-parking-up'))  #Количество парк мест    else:        parkingNum = 0    if (request.POST.get('num-guest-parking-up') != "" and request.POST.get('num-guest-parking-up') != None):        guestParkingNum = int(request.POST.get('num-guest-parking-up'))  #Количество парк мест    else:        guestParkingNum = 0    if (request.POST.get('url') != "" and request.POST.get('url') != None):        link = request.POST.get('url')  #Количество парк мест    else:        link = ""    if (request.POST.get('gps') != "" and request.POST.get('gps') != None):        gps_req = request.POST.get('gps')  #gps    else:        gps_req = ""    if (request.POST.get('sell_center') != "" and request.POST.get('sell_center') != None):        sell_center_req = request.POST.get('sell_center')  #центр продаж    else:        sell_center_req = ""    if (request.POST.get('total_area_complex') != "" and request.POST.get('total_area_complex') != None):        total_area_complex_req = request.POST.get('total_area_complex')  #общая площадь комплекса    else:        total_area_complex_req = 0    if (request.POST.get('built_in') != "" and request.POST.get('built_in') != None):        build_in_req = request.POST.get('built_in')  #пристройки    else:        build_in_req = 0    if (request.POST.get('commerc') != "" and request.POST.get('commerc') != None):        commerc_req = request.POST.get('commerc')  #коммерческие постройки    else:        commerc_req = 0    if (request.POST.get('rating') != "" and request.POST.get('rating') != None):        rating_req = request.POST.get('rating')  #рейтинг жк    else:        rating_req = ""    if (request.POST.get('grade') != "" and request.POST.get('grade') != None):        grade_req = request.POST.get('grade')  #оценка жк    else:        grade_req = ""    render_req = request.FILES.get('render', None)    map_req = request.FILES.get('map', None)        #cards    #tech    if (request.POST.get('frame') != "" and request.POST.get('frame') != None):        frame_req = request.POST.get('frame')    else:        frame_req = ""    if (request.POST.get('overlap') != "" and request.POST.get('overlap') != None):        overlap_req = request.POST.get('overlap')    else:        overlap_req = ""    if (request.POST.get('partitions') != "" and request.POST.get('partitions') != None):        partitions_req = request.POST.get('partitions')    else:        partitions_req = ""    if (request.POST.get('facade') != "" and request.POST.get('facade') != None):        facade_req = request.POST.get('facade')    else:        facade_req = ""    if (request.POST.get('profile') != "" and request.POST.get('profile') != None):        profile_req = request.POST.get('profile')    else:        profile_req = ""    if (request.POST.get('profile') != "" and request.POST.get('profile') != None):        profile_req = request.POST.get('profile')    else:        profile_req = ""    if (request.POST.get('heating') != "" and request.POST.get('heating') != None):        heating_req = request.POST.get('heating')    else:        heating_req = ""    if (request.POST.get('roof') != "" and request.POST.get('roof') != None):        roof_req = request.POST.get('roof')    else:        roof_req = ""    if (request.POST.get('terraces') != "" and request.POST.get('terraces') != None):        terraces_req = request.POST.get('terraces')    else:        terraces_req = ""    if (request.POST.get('ceilings') != "" and request.POST.get('ceilings') != None):        ceilings_req = request.POST.get('ceilings')    else:        ceilings_req = ""    if (request.POST.get('material') != "" and request.POST.get('material') != None):        material_req = request.POST.get('material')    else:        material_req = ""    if (request.POST.get('walls') != "" and request.POST.get('walls') != None):        walls_req = request.POST.get('walls')    else:        walls_req = ""    if (request.POST.get('warming') != "" and request.POST.get('warming') != None):        warming_req = request.POST.get('warming')    else:        warming_req = ""    if (request.POST.get('windows') != "" and request.POST.get('windows') != None):        windows_req = request.POST.get('windows')    else:        windows_req = ""    if (request.POST.get('manuf_windows') != "" and request.POST.get('manuf_windows') != None):        manuf_windows_req = request.POST.get('manuf_windows')    else:        manuf_windows_req = ""    if (request.POST.get('boiler') != "" and request.POST.get('boiler') != None):        boiler_req = request.POST.get('boiler')    else:        boiler_req = ""    if (request.POST.get('roofing') != "" and request.POST.get('roofing') != None):        roofing_req = request.POST.get('roofing')    else:        roofing_req = ""    if (request.POST.get('balconies') != "" and request.POST.get('balconies') != None):        balconies_req = request.POST.get('balconies')    else:        balconies_req = ""    if (request.POST.get('apartments') != "" and request.POST.get('apartments') != None):        apartments_req = request.POST.get('apartments')    else:        apartments_req = ""    #fin    if (request.POST.get('contribution') != "" and request.POST.get('contribution') != None):        contribution_req = request.POST.get('contribution')    else:        contribution_req = ""    if (request.POST.get('installment') != "" and request.POST.get('installment') != None):        installment_req = request.POST.get('installment')    else:        installment_req = ""    if (request.POST.get('mortgage') != "" and request.POST.get('mortgage') != None):        mortgage_req = request.POST.get('mortgage')    else:        mortgage_req = ""    if (request.POST.get('discount_100') != "" and request.POST.get('discount_100') != None):        discount_100_req = request.POST.get('discount_100')    else:        discount_100_req = ""    if (request.POST.get('discount') != "" and request.POST.get('discount') != None):        discount_req = request.POST.get('discount')    else:        discount_req = ""    if (request.POST.get('bank') != "" and request.POST.get('bank') != None):        bank_req = request.POST.get('bank')    else:        bank_req = ""    #land    if (request.POST.get('title') != "" and request.POST.get('title') != None):        title_req = request.POST.get('title')    else:        title_req = ""    if (request.POST.get('land_area') != "" and request.POST.get('land_area') != None):        land_area_req = request.POST.get('land_area')    else:        land_area_req = ""    if (request.POST.get('cadastral') != "" and request.POST.get('cadastral') != None):        cadastral_req = request.POST.get('cadastral')    else:        cadastral_req = ""    if (request.POST.get('purpose') != "" and request.POST.get('purpose') != None):        purpose_req = request.POST.get('purpose')    else:        purpose_req = ""    if (request.POST.get('percentage') != "" and request.POST.get('percentage') != None):        percentage_req = request.POST.get('percentage')    else:        percentage_req = ""    #purpose    if (request.POST.get('social_facilities') != "" and request.POST.get('social_facilities') != None):        social_facilities_req = request.POST.get('social_facilities')    else:        social_facilities_req = ""    if (request.POST.get('playground') != "" and request.POST.get('playground') != None):        playground_req = request.POST.get('playground')    else:        playground_req = ""    if (request.POST.get('comfort') != "" and request.POST.get('comfort') != None):        comfort_req = request.POST.get('comfort')    else:        comfort_req = ""    if (request.POST.get('security') != "" and request.POST.get('security') != None):        security_req = request.POST.get('security')    else:        security_req = ""    if (request.POST.get('infrastructure') != "" and request.POST.get('infrastructure') != None):        infrastructure_req = request.POST.get('infrastructure')    else:        infrastructure_req = ""    if (request.POST.get('rest') != "" and request.POST.get('rest') != None):        rest_req = request.POST.get('rest')    else:        rest_req = ""    if (request.POST.get('halls') != "" and request.POST.get('halls') != None):        halls_req = request.POST.get('halls')    else:        halls_req = ""    if (request.POST.get('solutions') != "" and request.POST.get('solutions') != None):        solutions_req = request.POST.get('solutions')    else:        solutions_req = ""    if (request.POST.get('bicycle_parking') != "" and request.POST.get('bicycle_parking') != None):        bicycle_parking_req = request.POST.get('bicycle_parking')    else:        bicycle_parking_req = ""    if (request.POST.get('animals') != "" and request.POST.get('animals') != None):        animals_req = request.POST.get('animals')    else:        animals_req = ""    if (request.POST.get('access') != "" and request.POST.get('access') != None):        access_req = request.POST.get('access')    else:        access_req = ""    if (request.POST.get('storage') != "" and request.POST.get('storage') != None):        storage_req = request.POST.get('storage')    else:        storage_req = ""    if (request.POST.get('concierge') != "" and request.POST.get('concierge') != None):        concierge_req = request.POST.get('concierge')    else:        concierge_req = ""    #Outdoor    if (request.POST.get('entertainment') != "" and request.POST.get('entertainment') != None):        entertainment_req = request.POST.get('entertainment')    else:        entertainment_req = ""    if (request.POST.get('transport') != "" and request.POST.get('transport') != None):        transport_req = request.POST.get('transport')    else:        transport_req = ""    if (request.POST.get('school') != "" and request.POST.get('school') != None):        school_req = request.POST.get('school')    else:        school_req = ""    if (request.POST.get('kindergarten') != "" and request.POST.get('kindergarten') != None):        kindergarten_req = request.POST.get('kindergarten')    else:        kindergarten_req = ""    if (request.POST.get('shops') != "" and request.POST.get('shops') != None):        shops_req = request.POST.get('shops')    else:        shops_req = ""    #Additionally    if (request.POST.get('schemes') != "" and request.POST.get('schemes') != None):        schemes_req = request.POST.get('schemes')    else:        schemes_req = ""    if (request.POST.get('strengths') != "" and request.POST.get('strengths') != None):        strengths_req = request.POST.get('strengths')    else:        strengths_req = ""    if (request.POST.get('weaknesses') != "" and request.POST.get('weaknesses') != None):        weaknesses_req = request.POST.get('weaknesses')    else:        weaknesses_req = ""    if (request.POST.get('additional') != "" and request.POST.get('additional') != None):        additional_req = request.POST.get('additional')    else:        additional_req = ""@login_requireddef object_edit_complex(request):    #Комплекс    build = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    try:        tech = Technical.objects.get(id_buildings = request.session['select'])    except:        tech = None    try:        fin = Finance.objects.get(id_buildings = request.session['select'])    except:        fin = None    try:        land = Land.objects.get(id_buildings = request.session['select'])    except:        land = None    try:        purpose = Purpose.objects.get(id_buildings = request.session['select'])    except:        purpose = None    try:        outdoor = Outdoor.objects.get(id_buildings = request.session['select'])    except:        outdoor = None    try:        additionally = Additionally.objects.get(id_buildings = request.session['select'])    except:        additionally = None    #Заказчик в селект    posts1 = Customers.objects.all().select_related('ownership')    #Типы улиц    posts2 = list(Streets.objects.order_by().values_list('type', flat=True).distinct())    if request.POST.get('save'):        #Комплекс        #logger        last = build        massageToLog = "Комплекс с именем '%s' был отредактирован. Исполняющий: '%s'" % (last.name, request.user.username)        log = Logger(info = massageToLog)        log.save()        complex_editing(request)                               build.class_field = classType        build.type_complex = complexType        build.name = complexName         build.street_name = streetName        build.customer = customerName        build.builder = builderName        build.urban_develop_zone = zoneName        build.subway = subwayName        build.city_area = cityAreaName        build.parking = parkingExist         build.parking_type = parkingType        build.parking_num = parkingNum           build.guest_parking_num = guestParkingNum           build.url = link                   build.gps = gps_req        build.sell_center = sell_center_req        build.total_area_complex = total_area_complex_req        build.build_in = build_in_req        build.commerc = commerc_req        build.rating = rating_req        build.grade = grade_req                if render_req != None:            build.Render = render_req        if map_req != None:            build.map = map_req        build.save()        if tech != None:            tech.frame = frame_req            tech.overlap = overlap_req            tech.partitions = partitions_req            tech.facade = facade_req            tech.profile = profile_req            tech.heating = heating_req            tech.roof = roof_req            tech.terraces = terraces_req            tech.ceilings = ceilings_req            tech.material = material_req            tech.walls = walls_req            tech.warming = warming_req            tech.windows = windows_req            tech.manuf_windows = manuf_windows_req            tech.boiler = boiler_req            tech.roofing = roofing_req            tech.balconies = balconies_req            tech.apartments = apartments_req            tech.save()        else:            tech_card = Technical(id_buildings = build, frame = frame_req, overlap = overlap_req, partitions = partitions_req, facade = facade_req, profile = profile_req,                                heating = heating_req, roof = roof_req, terraces = terraces_req, ceilings = ceilings_req, material = material_req, walls = walls_req,                                 warming = warming_req, windows = windows_req, manuf_windows = manuf_windows_req, boiler = boiler_req, roofing = roofing_req,                                 balconies = balconies_req, apartments = apartments_req)            tech_card.save()                        if fin != None:            fin.contribution = contribution_req            fin.installment = installment_req            fin.mortgage = mortgage_req            fin.discount_100 = discount_100_req            fin.discount = discount_req            fin.bank = bank_req            fin.save()        else:            fin_card = Finance(id_buildings = build, contribution = contribution_req, installment = installment_req, mortgage = mortgage_req, discount_100 = discount_100_req,                             discount = discount_req, bank = bank_req)            fin_card.save()        if land != None:            land.title = title_req            land.land_area = land_area_req            land.cadastral = cadastral_req            land.purpose = purpose_req            land.percentage = percentage_req            land.save()        else:            land_card = Land(id_buildings = build, title = title_req, land_area = land_area_req, cadastral = cadastral_req, purpose = purpose_req, percentage = percentage_req)            land_card.save()        if purpose != None:            purpose.social_facilities = social_facilities_req            purpose.playground = playground_req            purpose.comfort = comfort_req            purpose.security = security_req            purpose.infrastructure = infrastructure_req            purpose.rest = rest_req            purpose.halls = halls_req            purpose.solutions = solutions_req            purpose.bicycle_parking = bicycle_parking_req            purpose.animals = animals_req            purpose.access = access_req            purpose.storage = storage_req            purpose.concierge = concierge_req            purpose.save()        else:            purpose_card = Purpose(id_buildings = build, social_facilities = social_facilities_req, playground = playground_req, comfort = comfort_req, security = security_req,                                infrastructure = infrastructure_req, rest = rest_req, halls = halls_req, solutions = solutions_req, bicycle_parking = bicycle_parking_req,                                animals = animals_req, access = access_req, storage = storage_req, concierge = concierge_req)            purpose_card.save()        if outdoor != None:            outdoor.entertainment = entertainment_req            outdoor.transport = transport_req            outdoor.school = school_req            outdoor.kindergarten = kindergarten_req            outdoor.shops = shops_req            outdoor.save()        else:            outdoor_card = Outdoor(id_buildings = build, entertainment = entertainment_req, transport = transport_req, school = school_req, kindergarten = kindergarten_req, shops = shops_req)            outdoor_card.save()        if additionally != None:            additionally.schemes = schemes_req            additionally.strengths = strengths_req            additionally.weaknesses = weaknesses_req            additionally.additional = additional_req            additionally.save()        else:            additionally_card = Additionally(id_buildings = build, schemes = schemes_req, strengths = strengths_req, weaknesses = weaknesses_req, additional = additional_req)            additionally_card.save()        if parkingType == "Надземная":            house = Houses.objects.filter(id_buildings = request.session['select']).values_list('id_house', flat=True)            for i in range(len(house)):                house = Houses.objects.filter(id_house = i)                house.parking_num = None                          return redirect('objects_review')          return render(request, "app/object_edit_complex.html", {"posts1": posts1, "posts2": posts2, "build": build, "tech": tech, "fin": fin, "land": land,                                                        "purpose": purpose, "outdoor": outdoor, "additionally": additionally})@login_requireddef building_add(request):    #Заказчик в селект    posts1 = Customers.objects.all().select_related('ownership')    #Типы улиц    posts4 = list(Streets.objects.order_by().values_list('type', flat=True).distinct())    #Финансирование    posts5 = list(Financing.objects.order_by().values_list('name', flat=True))        if request.method == 'POST':        #Комплекс        try:            complex_editing(request)                           complexAdd = Buildings(class_field = classType, type_complex = complexType, name = complexName, street_name = streetName, customer = customerName,                                     builder = builderName, urban_develop_zone = zoneName, subway = subwayName, city_area = cityAreaName, parking = parkingExist,                                     parking_type = parkingType, parking_num = parkingNum, guest_parking_num = guestParkingNum, url = link, gps = gps_req, sell_center = sell_center_req,                                     total_area_complex = total_area_complex_req, build_in = build_in_req, commerc = commerc_req, rating = rating_req, grade = grade_req, Render = render_req, map = map_req)            complexAdd.save()            #Карточки            lastobj = Buildings.objects.last()            #tech            tech_card = Technical(id_buildings = lastobj, frame = frame_req, overlap = overlap_req, partitions = partitions_req, facade = facade_req, profile = profile_req,                                  heating = heating_req, roof = roof_req, terraces = terraces_req, ceilings = ceilings_req, material = material_req, walls = walls_req,                                   warming = warming_req, windows = windows_req, manuf_windows = manuf_windows_req, boiler = boiler_req, roofing = roofing_req,                                   balconies = balconies_req, apartments = apartments_req)            tech_card.save()            #fin            fin_card = Finance(id_buildings = lastobj, contribution = contribution_req, installment = installment_req, mortgage = mortgage_req, discount_100 = discount_100_req,                                discount = discount_req, bank = bank_req)            fin_card.save()            #land            land_card = Land(id_buildings = lastobj, title = title_req, land_area = land_area_req, cadastral = cadastral_req, purpose = purpose_req, percentage = percentage_req)            land_card.save()            #Purpose            purpose_card = Purpose(id_buildings = lastobj, social_facilities = social_facilities_req, playground = playground_req, comfort = comfort_req, security = security_req,                                   infrastructure = infrastructure_req, rest = rest_req, halls = halls_req, solutions = solutions_req, bicycle_parking = bicycle_parking_req,                                   animals = animals_req, access = access_req, storage = storage_req, concierge = concierge_req)            purpose_card.save()            #Outdoor            outdoor_card = Outdoor(id_buildings = lastobj, entertainment = entertainment_req, transport = transport_req, school = school_req, kindergarten = kindergarten_req, shops = shops_req)            outdoor_card.save()            #Additionally            additionally_card = Additionally(id_buildings = lastobj, schemes = schemes_req, strengths = strengths_req, weaknesses = weaknesses_req, additional = additional_req)            additionally_card.save()            #logger            last = Buildings.objects.last()            massageToLog = "Комплекс с именем '%s' был добавлен. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()                        #Дома            lastobj = Buildings.objects.last()            counts = request.POST.get('counts-houses') #Количество домов            for i in range(1, int(counts) + 1):                house_editing(request, i)                                 houseAdd = Houses(id_buildings = lastobj, street_number = num_build, ttl_area_building = area_build, ttl_area_apartments = area_apart,                                     storeys = storeys_num, construction_phase_prst = phase, parking_num = parking_nums,                                    remark = info, start_year = date_start, quarter_start = start_quarter, commis_year = date_commis, quarter = quarter)                           houseAdd.save()                #logger                last = Houses.objects.last()                massageToLog = "Дом с номером '%s'был добавлен для комплекса с именем '%s'. Исполняющий: '%s'" % (last.street_number, last.id_buildings.name, request.user.username)                log = Logger(info = massageToLog)                log.save()                        counts_second = request.POST.get('counts-sections') #Количество домов            for i in range(1, int(counts_second) + 1):                section_editing(request, i, lastobj)                         sectionAdd = Sections(id_house = houseId, number = sect_num_req, attribute = sale, financing = financ, duplex_apartments = dupl, penthouses = penth, storeys = storeys_req,                                         apartments_num = numApartTtl, a1_num = numApartOne, a2_num = numApartTwo, a3_num = numApartThree, a4_num = numApartFour,                                         a1_area_min = minAreaOne, a1_area_max = maxAreaOne, a2_area_min = minAreaTwo, a2_area_max = maxAreaTwo, a3_area_min = minAreaThree,                                        a3_area_max = maxAreaThree, a4_area_min = minAreaFour,  a4_area_max = maxAreaFour, avg_area = avgArea)                sectionAdd.save()                sectLast = Sections.objects.last()                today = datetime.now()                if (sale == "В продаже"):                    newSale = SalesAndPrices(id_sections = sectLast, a1_to_sale = numApartOne, a2_to_sale = numApartTwo, a3_to_sale = numApartThree, a4_to_sale = numApartFour, year = today.year, month = today.month)                    newSale.save()                #logger                last = Sections.objects.last()                massageToLog = "Секция с номером '%s' добавлена для дома с номером '%s' для комплекса '%s'. Исполняющий: '%s'" % (last.number, last.id_house.street_number, last.id_house.id_buildings.name, request.user.username)                log = Logger(info = massageToLog)                log.save()                        request.session['select'] = lastobj.id_buildings            return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Проверьте добавленные данные. Дополнительно: ' + str(e))                      return redirect('object_menu')    return render(request, "app/building_add.html", {"posts1": posts1, "posts4": posts4, "posts5": posts5 })#Analytic operationdef analytic_view_request(request):    filters = {}    aparts = {}    for key in request.POST:        v = request.POST.getlist(key)        if len(v) == 1 and (key == "year__gte" or key == "year__lte") and key!="apart":            v = v[0]                     filters[key] = v        if key == "apart":            for value in filters[key]:                aparts["a" + value + "_to_sale__gt"] = 0           if "csrfmiddlewaretoken" in filters:        del filters["csrfmiddlewaretoken"]    if "show" in filters:        del filters["show"]    if "apart" in filters:        del filters["apart"]    if "export" in filters:        del filters["export"]    if "month" in filters:        del filters["month"]    if "month_end" in filters:        del filters["month_end"]     yearStart = int(request.POST.get("year__gte"))    yearEnd = int(request.POST.get("year__lte"))    monthStart = int(request.POST.get("month"))    monthEnd = int(request.POST.get("month_end"))    #loggerMS.error(filters)    #loggerMS.error(aparts)    lst = []    sale = SalesAndPrices.objects.filter(**filters, **aparts, id_sections__attribute = "В продаже").select_related('id_sections')           for i in range(len(sale)):        #loggerMS.error(str(sale[i].year) + "___" + str(sale[i].month))        year = sale[i].year        month = sale[i].month        if int(year) == yearStart and int(month) < monthStart:            lst.append(sale[i].id_row)        if int(year) == yearEnd and int(month) > monthEnd:            lst.append(sale[i].id_row)        sale = SalesAndPrices.objects.filter(**filters, **aparts, id_sections__attribute = "В продаже").exclude(pk__in = lst).select_related('id_sections')    #values_list('id_sections', 'a1_to_sale','a2_to_sale','a3_to_sale','a4_to_sale','area_remain','a1_to_sale','a1_area_to_sale', 'a1_avg_price','a2_to_sale','a2_area_to_sale','a2_avg_price','a3_to_sale','a3_area_to_sale','a3_avg_price','a4_to_sale','a4_area_to_sale','a4_avg_price')    return saledef analytic_view(request):    #Заказчик в селект    cust = Customers.objects.all().select_related('ownership')    sale = None    yearStart_save = request.POST.get("year__gte", None)    yearEnd_save = request.POST.get("year__lte", None)    monthStart_save = request.POST.get("month", None)    monthEnd_save = request.POST.get("month_end", None)    class_save = request.POST.getlist("id_sections__id_house__id_buildings__class_field__in", None)    customer_save = request.POST.getlist("id_sections__id_house__id_buildings__customer__name__in", None)    zone_save = request.POST.getlist("id_sections__id_house__id_buildings__urban_develop_zone__in", None)    area_save = request.POST.getlist("id_sections__id_house__id_buildings__city_area__name__in", None)    subway_save = request.POST.getlist("id_sections__id_house__id_buildings__subway__name__in", None)    apart_save = request.POST.getlist("apart", None)    if request.POST.get('show'):        sale = analytic_view_request(request)    if request.POST.get('export'):        response = HttpResponse(content_type='application/ms-excel')        response['Content-Disposition'] = 'attachment; filename="report_' + str(datetime.now()) +'.xls"'                wb = xlwt.Workbook(encoding='utf-8')        ws = wb.add_sheet('Отчет')        row_num = 0        font_style = xlwt.XFStyle()        font_style.font.bold=True        columns = ['Orden', 'Cliente', 'Entrada', 'Instrumento', 'Marca', "col","col","col","col","col","col","col","col","col","col","col","col","col","col","col",]        for col_num in range(len(columns)):            ws.write(row_num, col_num, columns[col_num], font_style)        font_style = xlwt.XFStyle()        sale = analytic_view_request(request)        if sale != None:            for row in sale:                row_num +=1                loggerMS.error(row)                for col_num in range(len(row)):                    ws.write(row_num, col_num, row[col_num], font_style)                            wb.save(response)        return response                 return render(request, "app/analytic_view.html", {"cust": cust, "sale": sale , "yearStart_save" : yearStart_save, "yearEnd_save":yearEnd_save, "monthStart_save":monthStart_save,                                                      "monthEnd_save": monthEnd_save, "class_save": class_save, "customer_save":customer_save, "zone_save": zone_save,                                                       "area_save":area_save, "subway_save":subway_save, "apart_save":list(apart_save)})#unique value from arreydef unique(list1):    x = np.array(list1)    return np.unique(x)def analytic_dashboard(request):    #Заказчик в селект    cust = Customers.objects.all().select_related('ownership')    sale = None    classes = None    customers_arr = []    classes_arr = []    places_arr = []    yearStart_save = request.POST.get("year__gte", None)    yearEnd_save = request.POST.get("year__lte", None)    monthStart_save = request.POST.get("month", None)    monthEnd_save = request.POST.get("month_end", None)    class_save = request.POST.getlist("id_sections__id_house__id_buildings__class_field__in", None)    customer_save = request.POST.getlist("id_sections__id_house__id_buildings__customer__name__in", None)    zone_save = request.POST.getlist("id_sections__id_house__id_buildings__urban_develop_zone__in", None)    area_save = request.POST.getlist("id_sections__id_house__id_buildings__city_area__name__in", None)    subway_save = request.POST.getlist("id_sections__id_house__id_buildings__subway__name__in", None)    apart_save = request.POST.getlist("apart", None)    sale_sur = SalesAndPrices.objects.filter(id_sections__attribute = "В продаже")    temp = []    for i in range(len(sale_sur)):        temp.append(sale_sur[i].id_sections.id_house.id_buildings.id_buildings)    temp = unique(temp)        complexes_sur = Buildings.objects.filter(pk__in = temp)             for i in range (len(complexes_sur)):        if (complexes_sur[i].customer != None):            customers_arr.append(complexes_sur[i].customer.name)        if (complexes_sur[i].class_field != None):            classes_arr.append(complexes_sur[i].class_field)        if (complexes_sur[i].urban_develop_zone != None):            places_arr.append(complexes_sur[i].urban_develop_zone)    sale = serializers.serialize("json", sale_sur)     complexes = serializers.serialize("json", complexes_sur)     if request.POST.get('show'):        sale_sur = analytic_view_request(request)        temp = []        for i in range(len(sale_sur)):            temp.append(sale_sur[i].id_sections.id_house.id_buildings.id_buildings)        temp = unique(temp)                complexes_sur = Buildings.objects.filter(pk__in = temp)                 for i in range (len(complexes_sur)):           if (complexes_sur[i].customer != None):                customers_arr.append(complexes_sur[i].customer.name)           if (complexes_sur[i].class_field != None):                classes_arr.append(complexes_sur[i].class_field)           if (complexes_sur[i].urban_develop_zone != None):                places_arr.append(complexes_sur[i].urban_develop_zone)        complexes = serializers.serialize("json", complexes_sur)         sale = serializers.serialize("json", sale_sur)     return render(request, "app/analytic_dashboard.html", {"cust": cust, "sale": sale , "yearStart_save" : yearStart_save, "yearEnd_save":yearEnd_save, "monthStart_save":monthStart_save,                                                      "monthEnd_save": monthEnd_save, "class_save": class_save, "customer_save":customer_save, "zone_save": zone_save,                                                       "area_save":area_save, "subway_save":subway_save, "apart_save":list(apart_save), "customers_arr": json.dumps(customers_arr),                                                       "classes_arr": json.dumps(classes_arr), "places_arr": json.dumps(places_arr), "complexes": complexes})#print carddef card(request, document, line, text):    flag = False    temp = ""    index = request.session['index']    i = 0    for table in document.tables:        if flag == False:                  for row in table.rows[index:]:                i = i + 1                if flag == False:                          for paragraph in row.cells:                        if paragraph.text != temp:                            if line in paragraph.text:                                paragraph.text = paragraph.text + " " +  text                                flag = True                                       request.session['index'] = i                                temp = paragraph.text    return documentdef card_img(request, document, line, url):    flag = False    for table in document.tables:        if flag == False:              for row in table.rows:                if flag == False:                     for cell in row.cells:                        for paragraph in cell.paragraphs:                            if line in paragraph.text:                                paragraph.text = ""                                run = paragraph.add_run()                                try:                                    inline_shape = run.add_picture(url, width = Inches(3.2))                                except:                                    pass                                flag = True                                  return document