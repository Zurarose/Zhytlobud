"""Definition of views."""from django.shortcuts import render, redirectfrom django.http import HttpRequestfrom django.http import HttpResponsefrom django.http import JsonResponsefrom django.core import serializersimport jsonfrom django.contrib.auth import authenticatefrom django.contrib.auth import login as log from django.contrib.auth import logout as lgoutfrom django.contrib.auth.forms import UserCreationFormfrom django.contrib import messagesfrom django.contrib.auth.decorators import login_requiredfrom django.db.models import Qfrom .models import *from .forms import *import loggingloggerMS = logging.getLogger(__name__)#loggerMS.error('Something went wrong!Here')@login_requireddef logger(request):    #Просмотр заказчиков    instances = Logger.objects.all().order_by('-id_log')    return render(request, "app/logger.html", {"instances": instances})def login(request):                      """Renders the home page."""    if request.user.is_authenticated:       return render(request, 'app/menu.html')    if request.POST.get('log'):        username = request.POST['username']        password = request.POST['password']        user = authenticate(request, username=username, password=password)        if user is not None:            log(request, user)            # Redirect to a success page.            return render(request, 'app/menu.html')        else:            # Return an 'invalid login' error message.            messages.error(request,'username or password not correct')            return redirect('login')                      return render(request, 'app/login.html')@login_requireddef menu(request):    return render(request, "app/menu.html")@login_requireddef object_menu(request):    return render(request, "app/object_menu.html")@login_requireddef customer_menu(request):    return render(request, "app/customer_menu.html")@login_requireddef other_menu(request):    return render(request, "app/other_menu.html")def logout(request):    lgout(request)@login_requireddef register(request):    #Регистрация    if request.method == 'POST':        user_form = UserRegistrationForm(request.POST)        if user_form.is_valid():            try:                # Create a new user object but avoid saving it yet                new_user = user_form.save(commit=False)                # Set the chosen password                new_user.set_password(user_form.cleaned_data['password'])                # Save the User object                user_type = (request.POST.get('type', None))                if user_type != None:                    if user_type == "Аналитик":                        new_user.is_staff = True                                     elif user_type == "Администратор":                        new_user.is_superuser = True                  new_user.save()                #logger                last = User.objects.last()                massageToLog = "Пользователь с именем '%s' зарегистрирован. Исполняющий: '%s'" % (last.username, request.user.username)                log = Logger(info = massageToLog)                log.save()                return redirect('other_menu')            except Exception as e:                messages.error(request,'Что то пошло не так... Проверьте добавленные данные. Дополнительно: ' + str(e))                          return redirect('other_menu')    else:        user_form = UserRegistrationForm()    return render(request, 'app/register.html', {'user_form': user_form})@login_requireddef customers_add(request):    #Формы собственности    posts1 = Ownership.objects.all()    if request.method == 'POST':        try:            try:                form = Ownership.objects.get(form = request.POST.get('form')) #Форма собственности            except Ownership.DoesNotExist:                form = None            if (request.POST.get('name') != "" and request.POST.get('name') != None):                cust_name = request.POST.get('name')  #Имя            else:                cust_name = ""            if (request.POST.get('phone') != "" and request.POST.get('phone') != None):                phoneNum = request.POST.get('phone')  #Телефон            else:                phoneNum = ""            if (request.POST.get('date') != "" and request.POST.get('date') != None):                year = request.POST.get('date')  #Год            else:                year = ""            custAdd = Customers(ownership = form, name = cust_name, phone = phoneNum, start_work = year)                      custAdd.save()            #logger            last = Customers.objects.last()            massageToLog = "Заказчик с именем '%s' добавлен. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            return redirect('customers_edit')        except Exception as e:            messages.error(request,'Что то пошло не так... Проверьте добавленные данные. Дополнительно: ' + str(e))                      return redirect('customers_edit')    return render(request, "app/customers_add.html", {"posts1": posts1})@login_requireddef customers_edit(request):    #Просмотр заказчиков    instances = Customers.objects.all().select_related('ownership')    if request.POST.get('edit'):        if (request.POST.get('selected') != "" and request.POST.get('selected') != None):            select = request.POST.get('selected')  #Имя        else:            select = None        request.session['select'] = select        return redirect('customers_edit_values')        if request.POST.get('delete'):        try:            if (request.POST.get('selected') != "" and request.POST.get('selected') != None):                delete = request.POST.get('selected')  #Имя            else:                delete = None            #logger            last = Customers.objects.get(id_customer=delete)            massageToLog = "Заказчик с именем '%s' удален. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            last.delete()                          return redirect('customers_edit')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось удалить. Дополнительно: ' + str(e))                      return redirect('customers_edit')    return render(request, "app/customers_edit.html", {"instances": instances})@login_requireddef customers_edit_values(request):    #Формы собственности    cust = Customers.objects.select_related('ownership').get(pk = request.session['select'])    posts1 = Ownership.objects.all()    if request.method == 'POST':        try:            try:                formset = Ownership.objects.get(form = request.POST.get('form')) #Форма собственности            except Ownership.DoesNotExist:                formset = None            if (request.POST.get('name') != "" and request.POST.get('name') != None):                cust_name = request.POST.get('name')  #Имя            else:                cust_name = ""            if (request.POST.get('phone') != "" and request.POST.get('phone') != None):                phoneNum = request.POST.get('phone')  #Телефон            else:                phoneNum = ""            if (request.POST.get('date') != "" and request.POST.get('date') != None):                year = request.POST.get('date')  #Год            else:                year = ""            #logger            last = cust            massageToLog = "Заказчик с именем '%s' был отредактирован. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            cust.ownership = formset             cust.name = cust_name             cust.phone = phoneNum             cust.start_work = year             cust.save()            return redirect('customers_edit')        except Exception as e:            messages.error(request,'Что то пошло не так... Проверьте добавленные данные. Дополнительно: ' + str(e))                      return redirect('customers_edit_values')    return render(request, "app/customers_edit_values.html", {"posts1": posts1, "cust": cust})@login_requireddef sections_review(request):    #Просмотр всех комплексов    instances = Sections.objects.filter(attribute = "В продаже").select_related('id_house', 'financing')     if request.POST.get('review'):        if (request.POST.get('selected') != "" and request.POST.get('selected') != None):            select = request.POST.get('selected')  #Имя        else:            select = None        request.session['select'] = select        return redirect('objects_review')          return render(request, "app/sections_review.html", {"instances": instances})@login_requireddef objects_edit(request):    filtered = "В продаже"    #Просмотр всех комплексов    instances = Buildings.objects.all().select_related('street_name', 'customer', 'city_area', 'subway')     if request.POST.get('review'):        if (request.POST.get('selected') != "" and request.POST.get('selected') != None):            select = request.POST.get('selected')  #Имя        else:            select = None        request.session['select'] = select        return redirect('objects_review')         if request.POST.get('filter'):        if request.POST.get('filter') == "В продаже":            filtered = "В продаже"        elif request.POST.get('filter') == "В персперктиве":            filtered = "В персперктиве"        elif request.POST.get('filter') == "Все":            filtered = "Все"    if filtered == "Все":        instances = Buildings.objects.all().select_related('street_name', 'customer', 'city_area', 'subway')    if filtered == "В продаже":        vals = []        SectionsSale = Sections.objects.filter(attribute = "В продаже")        for row in SectionsSale:            if row.id_house.id_buildings.id_buildings in vals:                pass            else:                vals.append(row.id_house.id_buildings.id_buildings)        instances = Buildings.objects.filter(pk__in = vals).select_related('street_name', 'customer', 'city_area', 'subway')    if filtered == "В персперктиве":        vals = []        SectionsSale = Sections.objects.filter(attribute = "Перспектива")        for row in SectionsSale:            if row.id_house.id_buildings.id_buildings in vals:                pass            else:                vals.append(row.id_house.id_buildings.id_buildings)        instances = Buildings.objects.filter(pk__in = vals).select_related('street_name', 'customer', 'city_area', 'subway')    return render(request, "app/objects_edit.html", {"instances": instances, "filtered": filtered})@login_requireddef objects_review(request):    #Редактирование и просмотр комплексов    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    houses = Houses.objects.filter(id_buildings = request.session['select']).select_related('id_buildings')    if request.POST.get('delete_complex'):        try:            if 'select' in request.session:                delete = request.session['select']                #logger                last = Buildings.objects.get(id_buildings=delete)                massageToLog = "Комплекс с и именем '%s' удален. Исполняющий: '%s'" % (last.name, request.user.username)                log = Logger(info = massageToLog)                log.save()                last.delete()                return redirect('objects_edit')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось удалить комплекс. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('delete_house'):        try:            if request.POST.get('selected_house'):                delete = request.POST.get('selected_house')                #logger                last = Houses.objects.get(id_house=delete)                massageToLog = "Дом с номером '%s' удален из комплекса с именем '%s'. Исполняющий: '%s'" % (last.street_number, last.id_buildings.name, request.user.username)                log = Logger(info = massageToLog)                log.save()                last.delete()                return redirect('objects_review')                 except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось удалить дом. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('delete_section'):        try:            if request.POST.get('selected_section'):                delete = request.POST.get('selected_section')                #logger                last = Sections.objects.get(id_sections=delete)                massageToLog = "Секция с номером '%s' удалена из дома с номером '%s' в комплексе '%s'. СЕКЦИИ ПРОНУМИРОВАНЫ ЗАНОВО. Исполняющий: '%s'" % (last.number, last.id_house.street_number, last.id_house.id_buildings.name ,request.user.username)                log = Logger(info = massageToLog)                log.save()                last.delete()                if 'select' in request.session:                    build = request.session['select']                    housesToNum = Houses.objects.filter(id_buildings = build).values_list("id_house", flat=True)                    for i in range(len(housesToNum)):                        SectionsToNum = Sections.objects.filter(id_house = housesToNum[i]).values_list("id_sections", flat=True)                               for j in range(SectionsToNum.count()):                            SectionNuming = Sections.objects.get(id_sections = SectionsToNum[j])                            SectionNuming.number = j + 1                            SectionNuming.save()                return redirect('objects_review')         except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось удалить секцию. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('sold_section'):        try:            if request.POST.get('selected_section'):                tochange = request.POST.get('selected_section')                sect = Sections.objects.get(id_sections=tochange)                sect.attribute = "Продано"                sect.save()                    except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось изменить значение. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('sale_section'):        try:            if request.POST.get('selected_section'):                tochange = request.POST.get('selected_section')                sect = Sections.objects.get(id_sections=tochange)                sect.attribute = "В продаже"                sect.save()                    except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось изменить значение. Дополнительно: ' + str(e))                      return redirect('objects_review')    if request.POST.get('edit_complex'):        return redirect('object_edit_complex')    if request.POST.get('edit_house'):        request.session['selected_house'] = request.POST.get('selected_house')        return redirect('object_edit_house')    if request.POST.get('edit_section'):        request.session['selected_section'] = request.POST.get('selected_section')        return redirect('object_edit_section')    if request.POST.get('add_house'):        return redirect('object_add_house')    if request.POST.get('add_section'):        return redirect('object_add_section')    return render(request, "app/objects_review.html", {"complex": complex, "houses": houses})@login_requireddef object_edit_complex(request):    #Комплекс    build = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #Заказчик в селект    posts1 = Customers.objects.all().select_related('ownership')    #Типы улиц    posts2 = list(Streets.objects.order_by().values_list('type', flat=True).distinct())    if request.POST.get('save'):        #Комплекс        try:            #logger            last = build            massageToLog = "Комплекс с именем '%s' был отредактирован. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            classType = request.POST.get('class-select')  #класс            complexName = request.POST.get('complex-name')  #Название            try:                checkStreet = Streets.objects.filter(name = request.POST.get('name-streets'), type = request.POST.get('type-streets')).first()            except Streets.DoesNotExist:                streetName = None                  else:                       streetName = checkStreet  #Наименование            try:                checkCustomer = Customers.objects.filter(name = request.POST.get('customer')).first()            except Customers.DoesNotExist:                customerName = None                else:                         customerName = checkCustomer  #Наименование            if (request.POST.get('builder') != ""):                builderName = request.POST.get('builder')  #Генподрядчик            else:                builderName = ""                           try:                checkSubway = Subways.objects.filter(name = request.POST.get('subway')).first()            except Subways.DoesNotExist:                subwayName = None                       else:                         subwayName = checkSubway  #Наименование            try:                checkArea = Areas.objects.filter(name =  request.POST.get('city-area')).first()            except Areas.DoesNotExist:                cityAreaName = None                         else:                         cityAreaName = checkArea  #Наименование            zoneName = request.POST.get('urban-zone', "")            parkingExist = request.POST.get('parking', "")  #Парковка            parkingType = request.POST.get('parking-type', "")  #Тип парковки                    if (request.POST.get('num-parking-up') != "" and request.POST.get('num-parking-up') != None):                parkingNum = int(request.POST.get('num-parking-up'))  #Генподрядчик            else:                parkingNum = 0                        build.class_field = classType             build.name = complexName             build.street_name = streetName            build.customer = customerName            build.builder = builderName            build.urban_develop_zone = zoneName            build.subway = subwayName            build.city_area = cityAreaName            build.parking = parkingExist             build.parking_type = parkingType            build.parking_num = parkingNum                       build.save()                       if parkingType == "Надземная":                house = Houses.objects.filter(id_buildings = request.session['select']).values_list('id_house', flat=True)                for i in range(len(house)):                    house = Houses.objects.filter(id_house = i)                    house.parking_num = None                              return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить изменения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_edit_complex.html", {"posts1": posts1, "posts2": posts2, "build": build})@login_requireddef object_edit_house(request):        #дом    house = Houses.objects.select_related('id_buildings').get(pk = request.session['selected_house'])    #комплекс    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #Дома    houses = list(Houses.objects.filter(id_buildings = complex).values_list("street_number", flat = True))    if request.POST.get('save'):        try:            #logger            last = house            massageToLog = "Дом с номером '%s' был отредактирован для комплекса c именем '%s'. Исполнящий: '%s'" % ( last.street_number, last.id_buildings.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            if (request.POST.get('num-build') != "" and request.POST.get('num-build') != None):                num_build = request.POST.get('num-build')  #номер дома            else:                num_build = ""            if (request.POST.get('area-build') != "" and request.POST.get('area-build') != None):                area_build = float(request.POST.get('area-build'))  #Площадь дома            else:                area_build = 0            if (request.POST.get('area-apart') != "" and request.POST.get('area-apart') != None):                area_apart = float(request.POST.get('area-apart'))  #Площадь квартир            else:                area_apart = 0            if (request.POST.get('num-storeys') != "" and request.POST.get('num-storeys') != None):                storeys_num = int(request.POST.get('num-storeys')) #Этажность            else:                storeys_num = 0            if (request.POST.get('constr-phase-prc') != "" and request.POST.get('constr-phase-prc') != None):                phase = request.POST.get('constr-phase-prc') #Этап постройки            else:                phase = 0            if (request.POST.get('info-house') != "" and request.POST.get('info-house') != None):                info = request.POST.get('info-house') #Примечание            else:                info = ""                       if (request.POST.get('date-pick-start') != "" and request.POST.get('date-pick-start') != None):                date_start = request.POST.get('date-pick-start') #Год начала            else:                date_start = ""            if (request.POST.get('date-pick-commis') != "" and request.POST.get('date-pick-commis') != None):                date_commis = request.POST.get('date-pick-commis') #Год ввода            else:                date_commis = ""               if (request.POST.get('quarter-pick') != "" and request.POST.get('quarter-pick') != None):                quarter = int(request.POST.get('quarter-pick')) #Квартал            else:                quarter = 0                 if (request.POST.get('num-parking-down') != "" and request.POST.get('num-parking-down') != None):                parking_nums = int(request.POST.get('num-parking-down')) #Стоимость            else:                parking_nums = 0                           house.street_number = num_build            house.ttl_area_building = area_build             house.ttl_area_apartments = area_apart            house.storeys = storeys_num            house.construction_phase_prst = phase            house.parking_num = parking_nums                     house.remark = info            house.start_year = date_start            house.commis_year = date_commis            house.quarter = quarter                       house.save()             return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить изменения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_edit_house.html", {"house": house, "complex": complex, "houses":  json.dumps(houses)})@login_requireddef object_add_house(request):    #комплекс    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #дома    houses = list(Houses.objects.filter(id_buildings = complex).values_list("street_number", flat = True))    if request.POST.get('save'):        try:                   counts = request.POST.get('counts-houses') #Количество домов            for i in range(1, int(counts) + 1):                num_build = request.POST.get('num-build' + str(i))  #№ дома                if (request.POST.get('area-build' + str(i)) != "" and request.POST.get('area-build' + str(i)) != None):                    area_build = float(request.POST.get('area-build' + str(i)))  #Площадь дома                else:                    area_build = 0                if (request.POST.get('area-apart' + str(i)) != "" and request.POST.get('area-apart' + str(i)) != None):                    area_apart = float(request.POST.get('area-apart' + str(i)))  #Площадь квартир                else:                    area_apart = 0                if (request.POST.get('num-storeys' + str(i)) != "" and request.POST.get('num-storeys' + str(i)) != None):                    storeys_num = int(request.POST.get('num-storeys' + str(i))) #Этажность                else:                    storeys_num = 0                if (request.POST.get('constr-phase-prc' + str(i)) != "" and request.POST.get('constr-phase-prc' + str(i)) != None):                    phase = request.POST.get('constr-phase-prc' + str(i)) #Этап постройки                else:                    phase = 0                if (request.POST.get('info-house' + str(i)) != "" and request.POST.get('info-house' + str(i)) != None):                    info = request.POST.get('info-house' + str(i)) #Примечание                else:                    info = ""                              if (request.POST.get('date-pick-start' + str(i)) != "" and request.POST.get('date-pick-start' + str(i)) != None):                    date_start = request.POST.get('date-pick-start' + str(i)) #Год начала                else:                    date_start = ""                     if (request.POST.get('date-pick-commis' + str(i)) != "" and request.POST.get('date-pick-commis' + str(i)) != None):                    date_commis = request.POST.get('date-pick-commis' + str(i)) #Год ввода                else:                    date_commis = ""                     if (request.POST.get('quarter-pick' + str(i)) != "" and request.POST.get('quarter-pick' + str(i)) != None):                    quarter = int(request.POST.get('quarter-pick' + str(i))) #Квартал                else:                    quarter = 0                     if (request.POST.get('num-parking-down' + str(i)) != "" and request.POST.get('num-parking-down' + str(i)) != None):                    parking_nums = int(request.POST.get('num-parking-down' + str(i))) #Стоимость                else:                    parking_nums = 0                                  houseAdd = Houses(id_buildings = complex, street_number = num_build, ttl_area_building = area_build, ttl_area_apartments = area_apart,                                         storeys = storeys_num, construction_phase_prst = phase, parking_num = parking_nums,                                        remark = info, start_year = date_start, commis_year = date_commis, quarter = quarter)                           houseAdd.save()                 #logger                last = Houses.objects.last()                massageToLog = "Дом с номером '%s' добавлен к комплексу '%s'. Исполнящий: '%s'" % (last.street_number, last.id_buildings.name, request.user.username)                log = Logger(info = massageToLog)                log.save()            return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить изменения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_add_house.html", {"complex": complex, "houses": json.dumps(houses)})def object_edit_section(request):    #Секции    section = Sections.objects.select_related('id_house', 'financing',).get(pk = request.session['selected_section'])    #Комплекс    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #Финансирование    posts5 = list(Financing.objects.order_by().values_list('name', flat=True))    #Дома    houses_num = list(Houses.objects.filter(id_buildings = request.session['select']).values_list('street_number', flat=True))    #Выбранный дом    num = section.id_house.id_house    selected_num = (Houses.objects.get(id_house = num))    if request.POST.get('save'):        try:            #logger            last = section            massageToLog = "Секция с номером '%s' была отредактирована для дома c номером '%s' в комплексе '%s'. Исполняющий: '%s'" % (last.number, last.id_house.street_number, last.id_house.id_buildings.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            houseId = Houses.objects.get(street_number = request.POST.get('num-section-house'), id_buildings = request.session['select'])  #№ дом            sale = request.POST.get('sales', None)  #Продажи            try:                financ = Financing.objects.get(name = request.POST.get('finance')) #Финансирование            except Financing.DoesNotExist:                financ = None                  if (request.POST.get('duplex') != "" and request.POST.get('duplex') != None): #Дюплекс                dupl = request.POST.get('duplex')            else:                dupl = ""                                    if (request.POST.get('penthouse') != "" and request.POST.get('penthouse') != None): #Пентхаусы                penth = request.POST.get('penthouse')            else:                penth = ""               #Квартиры.  От 1км до 4км            if (request.POST.get('num-apart-ttl') != "" and request.POST.get('num-apart-ttl') != None):                numApartTtl = int(request.POST.get('num-apart-ttl'))            else:                numApartTtl = 0               if (request.POST.get('avg-area') != "" and request.POST.get('avg-area') != None):                avgArea = float(request.POST.get('avg-area'))            else:                avgArea = 0               if (request.POST.get('num-apart-one') != "" and request.POST.get('num-apart-one') != None):                numApartOne = int(request.POST.get('num-apart-one'))            else:                numApartOne = 0             if (request.POST.get('min-area-one') != "" and request.POST.get('min-area-one') != None):                minAreaOne = float(request.POST.get('min-area-one'))            else:                minAreaOne = 0             if (request.POST.get('max-area-one') != "" and request.POST.get('max-area-one') != None):                maxAreaOne = float(request.POST.get('max-area-one'))            else:                maxAreaOne = 0             if (request.POST.get('num-apart-two') != "" and request.POST.get('num-apart-two') != None):                numApartTwo = int(request.POST.get('num-apart-two'))            else:                numApartTwo = 0             if (request.POST.get('min-area-two') != "" and request.POST.get('min-area-two') != None):                minAreaTwo = float(request.POST.get('min-area-two'))            else:                minAreaTwo = 0                         if (request.POST.get('max-area-two') != "" and request.POST.get('max-area-two') != None):                maxAreaTwo = float(request.POST.get('max-area-two'))            else:                maxAreaTwo = 0             if (request.POST.get('num-apart-three') != "" and request.POST.get('num-apart-three') != None):                numApartThree = int(request.POST.get('num-apart-three'))            else:                numApartThree = 0             if (request.POST.get('min-area-three') != "" and request.POST.get('min-area-three') != None):                minAreaThree = float(request.POST.get('min-area-three'))            else:                minAreaThree = 0             if (request.POST.get('max-area-three') != "" and request.POST.get('max-area-three') != None):                maxAreaThree = float(request.POST.get('max-area-three'))            else:                maxAreaThree = 0             if (request.POST.get('num-apart-four') != "" and request.POST.get('num-apart-four') != None):                numApartFour = int(request.POST.get('num-apart-four'))            else:                numApartFour = 0            if (request.POST.get('min-area-four') != "" and request.POST.get('min-area-four') != None):                minAreaFour = float(request.POST.get('min-area-four'))            else:                minAreaFour = 0            if (request.POST.get('max-area-four') != "" and request.POST.get('max-area-four') != None):                maxAreaFour = float(request.POST.get('max-area-four'))            else:                maxAreaFour = 0                            section.id_house = houseId            section.attribute = sale            section.financing = financ            section.duplex_apartments = dupl            section.penthouses = penth            section.apartments_num = numApartTtl            section.a1_num = numApartOne            section.a2_num = numApartTwo            section.a3_num = numApartThree            section.a4_num = numApartFour            section.a1_area_min = minAreaOne            section.a1_area_max = maxAreaOne            section.a2_area_min = minAreaTwo            section.a2_area_max = maxAreaTwo            section.a3_area_min = minAreaThree            section.a3_area_max = maxAreaThree            section.a4_area_min = minAreaFour            section.a4_area_max = maxAreaFour            section.avg_area = avgArea            section.save()            return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить изменения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_edit_section.html", {"section": section, "complex": complex, "posts5": posts5, "houses_num": houses_num,                                                            "selected_num": selected_num.street_number})def object_add_section(request):    #Комплекс    complex = Buildings.objects.select_related('street_name', 'customer', 'city_area', 'subway').get(pk = request.session['select'])    #Финансирование    posts5 = list(Financing.objects.order_by().values_list('name', flat=True))    #Дома    houses_num = list(Houses.objects.filter(id_buildings = request.session['select']).values_list('street_number', flat=True))    if request.POST.get('save'):        try:            counts_second = request.POST.get('counts-sections') #Количество домов            for i in range(1, int(counts_second) + 1):                houseId = Houses.objects.get(street_number = request.POST.get('num-section-house' + str(i)), id_buildings = complex)  #№ дом                sale = request.POST.get('sales' + str(i), "")  #Продажи                try:                    financ = Financing.objects.get(name = request.POST.get('finance' + str(i))) #Финансирование                except Financing.DoesNotExist:                    financ = None                                      if (request.POST.get('duplex' + str(i)) != "" and request.POST.get('duplex' + str(i)) != None): #Дюплекс                    dupl = request.POST.get('duplex' + str(i))                else:                    dupl = ""                   if (request.POST.get('penthouse' + str(i)) != "" and request.POST.get('penthouse' + str(i)) != None): #Пентхаусы                    penth = request.POST.get('penthouse' + str(i))                else:                    penth = ""                   #Квартиры.  От 1км до 4км                if (request.POST.get('num-apart-ttl' + str(i)) != "" and request.POST.get('num-apart-ttl' + str(i)) != None):                    numApartTtl = int(request.POST.get('num-apart-ttl' + str(i)))                else:                    numApartTtl = 0                   if (request.POST.get('avg-area' + str(i)) != "" and request.POST.get('avg-area' + str(i)) != None):                    avgArea = float(request.POST.get('avg-area' + str(i)))                else:                    avgArea = 0                   if (request.POST.get('num-apart-one' + str(i)) != "" and request.POST.get('num-apart-one' + str(i)) != None):                    numApartOne = int(request.POST.get('num-apart-one' + str(i)))                else:                    numApartOne = 0                 if (request.POST.get('min-area-one' + str(i)) != "" and request.POST.get('min-area-one' + str(i)) != None):                    minAreaOne = float(request.POST.get('min-area-one' + str(i)))                else:                    minAreaOne = 0                 if (request.POST.get('max-area-one' + str(i)) != "" and request.POST.get('max-area-one' + str(i)) != None):                    maxAreaOne = float(request.POST.get('max-area-one' + str(i)))                else:                    maxAreaOne = 0                 if (request.POST.get('num-apart-two' + str(i)) != "" and request.POST.get('num-apart-two' + str(i)) != None):                    numApartTwo = int(request.POST.get('num-apart-two' + str(i)))                else:                    numApartTwo = 0                 if (request.POST.get('min-area-two' + str(i)) != "" and request.POST.get('min-area-two' + str(i)) != None):                    minAreaTwo = float(request.POST.get('min-area-two' + str(i)))                else:                    minAreaTwo = 0                             if (request.POST.get('max-area-two' + str(i)) != "" and request.POST.get('max-area-two' + str(i)) != None):                    maxAreaTwo = float(request.POST.get('max-area-two' + str(i)))                else:                    maxAreaTwo = 0                 if (request.POST.get('num-apart-three' + str(i)) != "" and request.POST.get('num-apart-three' + str(i)) != None):                    numApartThree = int(request.POST.get('num-apart-three' + str(i)))                else:                    numApartThree = 0                 if (request.POST.get('min-area-three' + str(i)) != "" and request.POST.get('min-area-three' + str(i)) != None):                    minAreaThree = float(request.POST.get('min-area-three' + str(i)))                else:                    minAreaThree = 0                 if (request.POST.get('max-area-three' + str(i)) != "" and request.POST.get('max-area-three' + str(i)) != None):                    maxAreaThree = float(request.POST.get('max-area-three' + str(i)))                else:                    maxAreaThree = 0                 if (request.POST.get('num-apart-four' + str(i)) != "" and request.POST.get('num-apart-four' + str(i)) != None):                    numApartFour = int(request.POST.get('num-apart-four' + str(i)))                else:                    numApartFour = 0                if (request.POST.get('min-area-four' + str(i)) != "" and request.POST.get('min-area-four' + str(i)) != None):                    minAreaFour = float(request.POST.get('min-area-four' + str(i)))                else:                    minAreaFour = 0                if (request.POST.get('max-area-four' + str(i)) != "" and request.POST.get('max-area-four' + str(i)) != None):                    maxAreaFour = float(request.POST.get('max-area-four' + str(i)))                else:                    maxAreaFour = 0                         sectionAdd = Sections(id_house = houseId, attribute = sale, financing = financ, duplex_apartments = dupl, penthouses = penth,                                         apartments_num = numApartTtl, a1_num = numApartOne, a2_num = numApartTwo, a3_num = numApartThree, a4_num = numApartFour,                                         a1_area_min = minAreaOne, a1_area_max = maxAreaOne, a2_area_min = minAreaTwo, a2_area_max = maxAreaTwo, a3_area_min = minAreaThree,                                        a3_area_max = maxAreaThree, a4_area_min = minAreaFour,  a4_area_max = maxAreaFour, avg_area = avgArea)                sectionAdd.save()                #to num sections                housesToNum = Houses.objects.filter(id_buildings = complex).values_list("id_house", flat=True)                for i in range(len(housesToNum)):                    SectionsToNum = Sections.objects.filter(id_house = housesToNum[i]).values_list("id_sections", flat=True)                           for j in range(SectionsToNum.count()):                        SectionNuming = Sections.objects.get(id_sections = SectionsToNum[j])                        SectionNuming.number = j + 1                        SectionNuming.save()                #logger                last = Sections.objects.last()                massageToLog = "Секция с номером '%s' добавлена для дома с номером '%s' для комплекса '%s'. Исполняющий: '%s'" % (last.number, last.id_house.street_number, last.id_house.id_buildings.name ,request.user.username)                log = Logger(info = massageToLog)                log.save()                       return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Не удалось сохранить изменения. Дополнительно: ' + str(e))                      return redirect('objects_review')    return render(request, "app/object_add_section.html", { "complex": complex, "posts5": posts5, "houses_num": houses_num})@login_requireddef building_add(request):    #Заказчик в селект    posts1 = Customers.objects.all().select_related('ownership')    #Типы улиц    posts4 = list(Streets.objects.order_by().values_list('type', flat=True).distinct())    #Финансирование    posts5 = list(Financing.objects.order_by().values_list('name', flat=True))        if request.method == 'POST':        #Комплекс        try:            classType = request.POST.get('class-select')  #класс            complexName = request.POST.get('complex-name')  #Название            try:                checkStreet = Streets.objects.filter(name = request.POST.get('name-streets'), type = request.POST.get('type-streets')).first()            except Streets.DoesNotExist:                streetName = None                  else:                       streetName = checkStreet  #Наименование            try:                checkCustomer = Customers.objects.filter(name = request.POST.get('customer')).first()            except Customers.DoesNotExist:                customerName = None                else:                         customerName = checkCustomer  #Наименование            if (request.POST.get('builder') != "" and request.POST.get('builder') != None):                builderName = request.POST.get('builder')  #Генподрядчик            else:                builderName = ""                           try:                checkSubway = Subways.objects.filter(name = request.POST.get('subway')).first()            except Subways.DoesNotExist:                subwayName = None                       else:                         subwayName = checkSubway  #Наименование            try:                checkArea = Areas.objects.filter(name =  request.POST.get('city-area')).first()            except Areas.DoesNotExist:                cityAreaName = None                         else:                         cityAreaName = checkArea  #Наименование            zoneName = request.POST.get('urban-zone', "")            parkingExist = request.POST.get('parking', "")  #Парковка            parkingType = request.POST.get('parking-type', "")  #Тип парковки                    if (request.POST.get('num-parking-up') != "" and request.POST.get('num-parking-up') != None):                parkingNum = int(request.POST.get('num-parking-up'))  #кол-во мест            else:                parkingNum = 0                     complexAdd = Buildings(class_field = classType, name = complexName, street_name = streetName, customer = customerName,                                     builder = builderName, urban_develop_zone = zoneName, subway = subwayName, city_area = cityAreaName, parking = parkingExist,                                     parking_type = parkingType, parking_num = parkingNum)            complexAdd.save()            #logger            last = Buildings.objects.last()            massageToLog = "Комплекс с именем '%s' был добавлен. Исполняющий: '%s'" % (last.name, request.user.username)            log = Logger(info = massageToLog)            log.save()            #Дома            lastobj = Buildings.objects.last()            counts = request.POST.get('counts-houses') #Количество домов            for i in range(1, int(counts) + 1):                num_build = request.POST.get('num-build' + str(i))  #№ дома                if (request.POST.get('area-build' + str(i)) != "" and request.POST.get('area-build' + str(i)) != None):                    area_build = float(request.POST.get('area-build' + str(i)))  #Площадь дома                else:                    area_build = 0                if (request.POST.get('area-apart' + str(i)) != "" and request.POST.get('area-apart' + str(i)) != None):                    area_apart = float(request.POST.get('area-apart' + str(i)))  #Площадь квартир                else:                    area_apart = 0                if (request.POST.get('num-storeys' + str(i)) != "" and request.POST.get('num-storeys' + str(i)) != None):                    storeys_num = int(request.POST.get('num-storeys' + str(i))) #Этажность                else:                    storeys_num = 0                if (request.POST.get('constr-phase-prc' + str(i)) != "" and request.POST.get('constr-phase-prc' + str(i)) != None):                    phase = request.POST.get('constr-phase-prc' + str(i)) #Этап постройки                else:                    phase = 0                if (request.POST.get('info-house' + str(i)) != "" and request.POST.get('info-house' + str(i)) != None):                    info = request.POST.get('info-house' + str(i)) #Примечание                else:                    info = ""                             if (request.POST.get('date-pick-start' + str(i)) != "" and request.POST.get('date-pick-start' + str(i)) != None):                    date_start = request.POST.get('date-pick-start' + str(i)) #Год начала                else:                    date_start = ""                    if (request.POST.get('date-pick-commis' + str(i)) != "" and request.POST.get('date-pick-commis' + str(i)) != None):                    date_commis = request.POST.get('date-pick-commis' + str(i)) #Год ввода                else:                    date_commis = ""                    if (request.POST.get('quarter-pick' + str(i)) != "" and request.POST.get('quarter-pick' + str(i)) != None):                    quarter = int(request.POST.get('quarter-pick' + str(i))) #Квартал                else:                    quarter = 0                     if (request.POST.get('num-parking-down' + str(i)) != "" and request.POST.get('num-parking-down' + str(i)) != None):                    parking_nums = int(request.POST.get('num-parking-down' + str(i))) #Стоимость                else:                    parking_nums = 0                                 houseAdd = Houses(id_buildings = lastobj, street_number = num_build, ttl_area_building = area_build, ttl_area_apartments = area_apart,                                     storeys = storeys_num, construction_phase_prst = phase, parking_num = parking_nums,                                    remark = info, start_year = date_start, commis_year = date_commis, quarter = quarter)                           houseAdd.save()                #logger                last = Houses.objects.last()                massageToLog = "Дом с номером '%s'был добавлен для комплекса с именем '%s'. Исполняющий: '%s'" % (last.street_number, last.id_buildings.name, request.user.username)                log = Logger(info = massageToLog)                log.save()                        counts_second = request.POST.get('counts-sections') #Количество домов            for i in range(1, int(counts_second) + 1):                houseId = Houses.objects.get(street_number = request.POST.get('num-section-house' + str(i)), id_buildings = lastobj)  #№ дом                sale = request.POST.get('sales' + str(i), "")  #Продажи                try:                    financ = Financing.objects.get(name = request.POST.get('finance' + str(i))) #Финансирование                except Financing.DoesNotExist:                    financ = None                  if (request.POST.get('duplex' + str(i)) != "" and request.POST.get('duplex' + str(i)) != None): #Дюплекс                    dupl = request.POST.get('duplex' + str(i))                else:                    dupl = ""                   if (request.POST.get('penthouse' + str(i)) != "" and request.POST.get('penthouse' + str(i)) != None): #Пентхаусы                    penth = request.POST.get('penthouse' + str(i))                else:                    penth = ""                   #Квартиры.  От 1км до 4км                if (request.POST.get('num-apart-ttl' + str(i)) != "" and request.POST.get('num-apart-ttl' + str(i)) != None):                    numApartTtl = int(request.POST.get('num-apart-ttl' + str(i)))                else:                    numApartTtl = 0                   if (request.POST.get('avg-area' + str(i)) != "" and request.POST.get('avg-area' + str(i)) != None):                    avgArea = float(request.POST.get('avg-area' + str(i)))                else:                    avgArea = 0                   if (request.POST.get('num-apart-one' + str(i)) != "" and request.POST.get('num-apart-one' + str(i)) != None):                    numApartOne = int(request.POST.get('num-apart-one' + str(i)))                else:                    numApartOne = 0                 if (request.POST.get('min-area-one' + str(i)) != "" and request.POST.get('min-area-one' + str(i)) != None):                    minAreaOne = float(request.POST.get('min-area-one' + str(i)))                else:                    minAreaOne = 0                 if (request.POST.get('max-area-one' + str(i)) != "" and request.POST.get('max-area-one' + str(i)) != None):                    maxAreaOne = float(request.POST.get('max-area-one' + str(i)))                else:                    maxAreaOne = 0                 if (request.POST.get('num-apart-two' + str(i)) != "" and request.POST.get('num-apart-two' + str(i)) != None):                    numApartTwo = int(request.POST.get('num-apart-two' + str(i)))                else:                    numApartTwo = 0                 if (request.POST.get('min-area-two' + str(i)) != "" and request.POST.get('min-area-two' + str(i)) != None):                    minAreaTwo = float(request.POST.get('min-area-two' + str(i)))                else:                    minAreaTwo = 0                             if (request.POST.get('max-area-two' + str(i)) != "" and request.POST.get('max-area-two' + str(i)) != None):                    maxAreaTwo = float(request.POST.get('max-area-two' + str(i)))                else:                    maxAreaTwo = 0                 if (request.POST.get('num-apart-three' + str(i)) != "" and request.POST.get('num-apart-three' + str(i)) != None):                    numApartThree = int(request.POST.get('num-apart-three' + str(i)))                else:                    numApartThree = 0                 if (request.POST.get('min-area-three' + str(i)) != "" and request.POST.get('min-area-three' + str(i)) != None):                    minAreaThree = float(request.POST.get('min-area-three' + str(i)))                else:                    minAreaThree = 0                 if (request.POST.get('max-area-three' + str(i)) != "" and request.POST.get('max-area-three' + str(i)) != None):                    maxAreaThree = float(request.POST.get('max-area-three' + str(i)))                else:                    maxAreaThree = 0                 if (request.POST.get('num-apart-four' + str(i)) != "" and request.POST.get('num-apart-four' + str(i)) != None):                    numApartFour = int(request.POST.get('num-apart-four' + str(i)))                else:                    numApartFour = 0                if (request.POST.get('min-area-four' + str(i)) != "" and request.POST.get('min-area-four' + str(i)) != None):                    minAreaFour = float(request.POST.get('min-area-four' + str(i)))                else:                    minAreaFour = 0                if (request.POST.get('max-area-four' + str(i)) != "" and request.POST.get('max-area-four' + str(i)) != None):                    maxAreaFour = float(request.POST.get('max-area-four' + str(i)))                else:                    maxAreaFour = 0                         sectionAdd = Sections(id_house = houseId, attribute = sale, financing = financ, duplex_apartments = dupl, penthouses = penth,                                         apartments_num = numApartTtl, a1_num = numApartOne, a2_num = numApartTwo, a3_num = numApartThree, a4_num = numApartFour,                                         a1_area_min = minAreaOne, a1_area_max = maxAreaOne, a2_area_min = minAreaTwo, a2_area_max = maxAreaTwo, a3_area_min = minAreaThree,                                        a3_area_max = maxAreaThree, a4_area_min = minAreaFour,  a4_area_max = maxAreaFour, avg_area = avgArea)                sectionAdd.save()                #to num sections                housesToNum = Houses.objects.filter(id_buildings = lastobj.id_buildings).values_list("id_house", flat=True)                for i in range(len(housesToNum)):                    SectionsToNum = Sections.objects.filter(id_house = housesToNum[i]).values_list("id_sections", flat=True)                           for j in range(SectionsToNum.count()):                        SectionNuming = Sections.objects.get(id_sections = SectionsToNum[j])                        SectionNuming.number = j + 1                        SectionNuming.save()                #logger                last = Sections.objects.last()                massageToLog = "Секция с номером '%s' добавлена для дома с номером '%s' для комплекса '%s'. Исполняющий: '%s'" % (last.number, last.id_house.street_number, last.id_house.id_buildings.name, request.user.username)                log = Logger(info = massageToLog)                log.save()                        request.session['select'] = lastobj.id_buildings            return redirect('objects_review')        except Exception as e:            messages.error(request,'Что то пошло не так... Проверьте добавленные данные. Дополнительно: ' + str(e))                      return redirect('object_menu')    return render(request, "app/building_add.html", {"posts1": posts1, "posts4": posts4, "posts5": posts5 })@login_requireddef getStreets(request):    streets = list(Streets.objects.filter(type = request.GET.get('type')).values_list("name", flat=True))    return JsonResponse({'names': streets }, status=200)@login_requireddef getSubways(request):    subways = list(Subways.objects.filter(zone = request.GET.get('zone')).values_list("name", flat=True))    return JsonResponse({'names': subways }, status=200)@login_requireddef getCityAreas(request):    cityAreas = list(Areas.objects.filter(zone = request.GET.get('zone')).values_list("name", flat=True))    return JsonResponse({'names': cityAreas }, status=200)def getSection(request):    try:        Section = list(Sections.objects.filter(id_house = request.GET.get('selected')).values_list(            "id_sections", "number", "attribute","financing__name","duplex_apartments",            "penthouses","apartments_num","avg_area","a1_num", "a1_area_min",             "a1_area_max","a2_num", "a2_area_min", "a2_area_max","a3_num",             "a3_area_min", "a3_area_max","a4_num", "a4_area_min", "a4_area_max"))        except:        return redirect('objects_review')    return JsonResponse({'objects': Section }, status=200)